<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>BaseCTF2024-Crypto-naby</title>
    <link href="/2024/12/05/basectf2024/"/>
    <url>/2024/12/05/basectf2024/</url>
    
    <content type="html"><![CDATA[<blockquote><p>官方wp:https://j0zr0js7k7j.feishu.cn/docx/MS06dyLGRoHBfzxGPF1cz0VhnGh复现平台: https://gz.imxbt.cn/games/13</p></blockquote><h1 id="crypto">Crypto</h1><h2 id="week1">week1</h2><h3 id="babypack">babypack</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br>flag=<span class="hljs-string">b&#x27;BaseCTF&#123;&#125;&#x27;</span><br>m=bytes_to_long(flag)<br>bin_m=<span class="hljs-built_in">bin</span>(m)[<span class="hljs-number">2</span>:]<br>length=<span class="hljs-built_in">len</span>(bin_m)<br><br>a=[<span class="hljs-number">1</span>]<br><span class="hljs-built_in">sum</span>=<span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length-<span class="hljs-number">1</span>):<br>    temp=random.randint(<span class="hljs-number">2</span>*<span class="hljs-built_in">sum</span>+<span class="hljs-number">1</span>,<span class="hljs-number">4</span>*<span class="hljs-built_in">sum</span>)<br>    <span class="hljs-built_in">sum</span>=<span class="hljs-built_in">sum</span>+temp<br>    a.append(temp)<br><br>a=a[::-<span class="hljs-number">1</span>]<br>c=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>    <span class="hljs-keyword">if</span> bin_m[i]==<span class="hljs-string">&#x27;1&#x27;</span>:<br>        c=c+a[i]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a=&quot;</span>,a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c=&quot;</span>,c)<br></code></pre></td></tr></table></figure><p>简单的超递增序列（不懂的可以简单了解一下背包密码）</p><p>从尾开始遍历列表a，大于c就为0，小于等于c就为1，并且c要减去这个值</p><p>(数据太多我就不贴了)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#BaseCTF&#123;2c4b0c15-3bee-4e4a-be6e-0f21e44bd4c9&#125;</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>a=<br>c=<span class="hljs-number">2488656295807929935404316556194747314175977860755594014838879551525915558042003735363919054632036359039039831854134957725034750353847782168033537523854288427613513938991943920607437000388885418821419115067060003426834</span><br>bin_m=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    <span class="hljs-keyword">if</span> c&gt;=i:<br>        bin_m+=<span class="hljs-string">&quot;1&quot;</span><br>        c=c-i<br>    <span class="hljs-keyword">else</span>:<br>        bin_m+=<span class="hljs-string">&quot;0&quot;</span><br>m=<span class="hljs-built_in">int</span>(bin_m,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><h3 id="babyrsa">babyrsa</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag=<span class="hljs-string">b&#x27;BaseCTF&#123;&#125;&#x27;</span><br>m=bytes_to_long(flag)<br><br>n=getPrime(<span class="hljs-number">1024</span>)<br>e=<span class="hljs-number">65537</span><br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n =&quot;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e =&quot;</span>,e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c =&quot;</span>,c)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">n = 104183228088542215832586853960545770129432455017084922666863784677429101830081296092160577385504119992684465370064078111180392569428724567004127219404823572026223436862745730173139986492602477713885542326870467400963852118869315846751389455454901156056052615838896369328997848311481063843872424140860836988323</span><br><span class="hljs-string">e = 65537</span><br><span class="hljs-string">c = 82196463059676486575535008370915456813185183463924294571176174789532397479953946434034716719910791511862636560490018194366403813871056990901867869218620209108897605739690399997114809024111921392073218916312505618204406951839504667533298180440796183056408632017397568390899568498216649685642586091862054119832</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>单素数RSA</p><blockquote><p><spanclass="math display">\[\phi(n)\]</span>表示从1到n之间，有多少个数与n互素。</p><p>计算方法：排除掉不与n互素的数。</p><p><span class="math display">\[\phi(pq)=pq-p-q+1 =(p-1)(q-1)\]</span></p><p>这题n已经是素数了，1到n-1都与n互素，<spanclass="math display">\[\phi(n)=n-1\]</span></p></blockquote><p>求到<span class="math display">\[\phi\]</span>之后就正常做就行</p><p>（理解RSA最重要的一点是搞懂e*d=1mod(φ(n)），要理解为什么这里为什么是取φ(n)）</p><p>（很难绷，为什么那么多人问我n怎么分解，n=getPrime(1024)已经是素数了，不需要分解了。）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br>n = <span class="hljs-number">104183228088542215832586853960545770129432455017084922666863784677429101830081296092160577385504119992684465370064078111180392569428724567004127219404823572026223436862745730173139986492602477713885542326870467400963852118869315846751389455454901156056052615838896369328997848311481063843872424140860836988323</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">82196463059676486575535008370915456813185183463924294571176174789532397479953946434034716719910791511862636560490018194366403813871056990901867869218620209108897605739690399997114809024111921392073218916312505618204406951839504667533298180440796183056408632017397568390899568498216649685642586091862054119832</span><br><br>phin=n-<span class="hljs-number">1</span><br>d=gmpy2.invert(e,phin)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-comment">#b&#x27;BaseCTF&#123;7d7c90ae-1127-4170-9e0d-d796efcd305b&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="hellpcrypto">hellpCrypto</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">import</span> random<br><br>flag=<span class="hljs-string">b&#x27;BaseCTF&#123;&#125;&#x27;</span><br><br>key=random.randbytes(<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(bytes_to_long(key))<br><br>my_aes=AES.new(key=key,mode=AES.MODE_ECB)<br><span class="hljs-built_in">print</span>(my_aes.encrypt(pad(flag,AES.block_size)))<br><br><span class="hljs-comment"># key1 = 208797759953288399620324890930572736628</span><br><span class="hljs-comment"># c = b&#x27;U\xcd\xf3\xb1 r\xa1\x8e\x88\x92Sf\x8a`Sk],\xa3(i\xcd\x11\xd0D\x1edd\x16[&amp;\x92@^\xfc\xa9(\xee\xfd\xfb\x07\x7f:\x9b\x88\xfe&#123;\xae&#x27;</span><br></code></pre></td></tr></table></figure><p>直接AES解密即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><br><br>key1 = <span class="hljs-number">208797759953288399620324890930572736628</span><br>c = <span class="hljs-string">b&#x27;U\xcd\xf3\xb1 r\xa1\x8e\x88\x92Sf\x8a`Sk],\xa3(i\xcd\x11\xd0D\x1edd\x16[&amp;\x92@^\xfc\xa9(\xee\xfd\xfb\x07\x7f:\x9b\x88\xfe&#123;\xae&#x27;</span><br>my_aes1=AES.new(key=long_to_bytes(key1),mode=AES.MODE_ECB)<br><span class="hljs-built_in">print</span>(my_aes1.decrypt(c))<br><br><span class="hljs-comment">#b&#x27;BaseCTF&#123;b80bf679-1869-4fde-b3f9-d51b872d31fb&#125;\x03\x03\x03&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="你会算md5吗">你会算md5吗</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><br>flag=<span class="hljs-string">&#x27;BaseCTF&#123;&#125;&#x27;</span><br><br>output=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag:<br>    my_md5=hashlib.md5()<br>    my_md5.update(i.encode())<br>    output.append(my_md5.hexdigest())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;output =&quot;</span>,output)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">output = [&#x27;9d5ed678fe57bcca610140957afab571&#x27;, &#x27;0cc175b9c0f1b6a831c399e269772661&#x27;, &#x27;03c7c0ace395d80182db07ae2c30f034&#x27;, &#x27;e1671797c52e15f763380b45e841ec32&#x27;, &#x27;0d61f8370cad1d412f80b84d143e1257&#x27;, &#x27;b9ece18c950afbfa6b0fdbfa4ff731d3&#x27;, &#x27;800618943025315f869e4e1f09471012&#x27;, &#x27;f95b70fdc3088560732a5ac135644506&#x27;, &#x27;0cc175b9c0f1b6a831c399e269772661&#x27;, &#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;, &#x27;92eb5ffee6ae2fec3ad71c777531578f&#x27;, &#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;, &#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;, &#x27;eccbc87e4b5ce2fe28308fd9f2a7baf3&#x27;, &#x27;0cc175b9c0f1b6a831c399e269772661&#x27;, &#x27;e4da3b7fbbce2345d7772b0674a318d5&#x27;, &#x27;336d5ebc5436534e61d16e63ddfca327&#x27;, &#x27;eccbc87e4b5ce2fe28308fd9f2a7baf3&#x27;, &#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;, &#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;, &#x27;45c48cce2e2d7fbdea1afc51c7c6ad26&#x27;, &#x27;336d5ebc5436534e61d16e63ddfca327&#x27;, &#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;, &#x27;8f14e45fceea167a5a36dedd4bea2543&#x27;, &#x27;1679091c5a880faf6fb5e6087eb1b2dc&#x27;, &#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;, &#x27;336d5ebc5436534e61d16e63ddfca327&#x27;, &#x27;92eb5ffee6ae2fec3ad71c777531578f&#x27;, &#x27;8277e0910d750195b448797616e091ad&#x27;, &#x27;0cc175b9c0f1b6a831c399e269772661&#x27;, &#x27;c81e728d9d4c2f636f067f89cc14862c&#x27;, &#x27;336d5ebc5436534e61d16e63ddfca327&#x27;, &#x27;0cc175b9c0f1b6a831c399e269772661&#x27;, &#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;, &#x27;c9f0f895fb98ab9159f51fd0297e236d&#x27;, &#x27;e1671797c52e15f763380b45e841ec32&#x27;, &#x27;e1671797c52e15f763380b45e841ec32&#x27;, &#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;, &#x27;8277e0910d750195b448797616e091ad&#x27;, &#x27;92eb5ffee6ae2fec3ad71c777531578f&#x27;, &#x27;45c48cce2e2d7fbdea1afc51c7c6ad26&#x27;, &#x27;0cc175b9c0f1b6a831c399e269772661&#x27;, &#x27;c9f0f895fb98ab9159f51fd0297e236d&#x27;, &#x27;0cc175b9c0f1b6a831c399e269772661&#x27;, &#x27;cbb184dd8e05c9709e5dcaedaa0495cf&#x27;]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>单字符md5，可以理解为单字节加密，没有行列转换混淆的话，一般都可以直接爆破</p><p>（如果答案不对一般就是字符集的问题，整数32-126就是可见字符范围）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><br><br>output = [<span class="hljs-string">&#x27;9d5ed678fe57bcca610140957afab571&#x27;</span>, <span class="hljs-string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>, <span class="hljs-string">&#x27;03c7c0ace395d80182db07ae2c30f034&#x27;</span>, <span class="hljs-string">&#x27;e1671797c52e15f763380b45e841ec32&#x27;</span>, <span class="hljs-string">&#x27;0d61f8370cad1d412f80b84d143e1257&#x27;</span>, <span class="hljs-string">&#x27;b9ece18c950afbfa6b0fdbfa4ff731d3&#x27;</span>, <span class="hljs-string">&#x27;800618943025315f869e4e1f09471012&#x27;</span>, <span class="hljs-string">&#x27;f95b70fdc3088560732a5ac135644506&#x27;</span>, <span class="hljs-string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>, <span class="hljs-string">&#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;</span>, <span class="hljs-string">&#x27;92eb5ffee6ae2fec3ad71c777531578f&#x27;</span>, <span class="hljs-string">&#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;</span>, <span class="hljs-string">&#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;</span>, <span class="hljs-string">&#x27;eccbc87e4b5ce2fe28308fd9f2a7baf3&#x27;</span>, <span class="hljs-string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>, <span class="hljs-string">&#x27;e4da3b7fbbce2345d7772b0674a318d5&#x27;</span>, <span class="hljs-string">&#x27;336d5ebc5436534e61d16e63ddfca327&#x27;</span>, <span class="hljs-string">&#x27;eccbc87e4b5ce2fe28308fd9f2a7baf3&#x27;</span>, <span class="hljs-string">&#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;</span>, <span class="hljs-string">&#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;</span>, <span class="hljs-string">&#x27;45c48cce2e2d7fbdea1afc51c7c6ad26&#x27;</span>, <span class="hljs-string">&#x27;336d5ebc5436534e61d16e63ddfca327&#x27;</span>, <span class="hljs-string">&#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;</span>, <span class="hljs-string">&#x27;8f14e45fceea167a5a36dedd4bea2543&#x27;</span>, <span class="hljs-string">&#x27;1679091c5a880faf6fb5e6087eb1b2dc&#x27;</span>, <span class="hljs-string">&#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;</span>, <span class="hljs-string">&#x27;336d5ebc5436534e61d16e63ddfca327&#x27;</span>, <span class="hljs-string">&#x27;92eb5ffee6ae2fec3ad71c777531578f&#x27;</span>, <span class="hljs-string">&#x27;8277e0910d750195b448797616e091ad&#x27;</span>, <span class="hljs-string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>, <span class="hljs-string">&#x27;c81e728d9d4c2f636f067f89cc14862c&#x27;</span>, <span class="hljs-string">&#x27;336d5ebc5436534e61d16e63ddfca327&#x27;</span>, <span class="hljs-string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>, <span class="hljs-string">&#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;</span>, <span class="hljs-string">&#x27;c9f0f895fb98ab9159f51fd0297e236d&#x27;</span>, <span class="hljs-string">&#x27;e1671797c52e15f763380b45e841ec32&#x27;</span>, <span class="hljs-string">&#x27;e1671797c52e15f763380b45e841ec32&#x27;</span>, <span class="hljs-string">&#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;</span>, <span class="hljs-string">&#x27;8277e0910d750195b448797616e091ad&#x27;</span>, <span class="hljs-string">&#x27;92eb5ffee6ae2fec3ad71c777531578f&#x27;</span>, <span class="hljs-string">&#x27;45c48cce2e2d7fbdea1afc51c7c6ad26&#x27;</span>, <span class="hljs-string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>, <span class="hljs-string">&#x27;c9f0f895fb98ab9159f51fd0297e236d&#x27;</span>, <span class="hljs-string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>, <span class="hljs-string">&#x27;cbb184dd8e05c9709e5dcaedaa0495cf&#x27;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> output:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">33</span>,<span class="hljs-number">128</span>):<br>        my_md5=hashlib.md5()<br>        my_md5.update(<span class="hljs-built_in">chr</span>(j).encode())<br>        <span class="hljs-keyword">if</span>  my_md5.hexdigest() == i:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(j),end=<span class="hljs-string">&quot;&quot;</span>)<br>            <span class="hljs-keyword">break</span><br><span class="hljs-comment">#BaseCTF&#123;a4bf43a5-3ff9-4764-bda2-af8ee4db9a8a&#125;</span><br></code></pre></td></tr></table></figure><h2 id="week2">week2</h2><h3 id="two_squares">two_squares</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>flag=<span class="hljs-string">b&#x27;BaseCTF&#123;&#125;&#x27;</span><br>m=bytes_to_long(flag)<br>p=getPrime(<span class="hljs-number">128</span>)<br>q=getPrime(<span class="hljs-number">128</span>)<br>n=p*q<br>e=<span class="hljs-number">65537</span><br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br>x=p^<span class="hljs-number">2</span>+q^<span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e =&quot;</span>,e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c =&quot;</span>,c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x =&quot;</span>,x)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">e = 65537</span><br><span class="hljs-string">c = 42330675787206041757903427737108553993012805007294570657461042152628982126538</span><br><span class="hljs-string">x = 209479773119142584969854470862023704936857416491817498021871883305658177375498</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>利用sage中的two_squares()可以很方便的进行求解（此题本意就是一道环境题，导致很多新手误解，再次道个歉）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">42330675787206041757903427737108553993012805007294570657461042152628982126538</span><br>x = <span class="hljs-number">209479773119142584969854470862023704936857416491817498021871883305658177375498</span><br>p,q=two_squares(x)<br>p,q=<span class="hljs-built_in">int</span>(p),<span class="hljs-built_in">int</span>(q)<br>n=p*q<br>phin=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gmpy2.invert(e,phin)<br>a=long_to_bytes(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(c,d,n)))<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-comment"># b&#x27;BaseCTF&#123;0760becd-cefaab0b094d&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="random_primes">random_primes</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_n</span>():<br>    primes=[getPrime(<span class="hljs-number">128</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>)]<br>    n = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>        n *= primes[random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">127</span>)]<br>    <span class="hljs-keyword">return</span> primes,n<br><br>flag=<span class="hljs-string">b&#x27;BaseCTF&#123;&#125;&#x27;</span><br>m=bytes_to_long(flag)<br><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag)==<span class="hljs-number">45</span><br><br>primes,n = gen_n()<br>e = <span class="hljs-number">0x010001</span><br><br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n =&quot;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e =&quot;</span>,e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c =&quot;</span>,c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;primes =&quot;</span>,primes)<br></code></pre></td></tr></table></figure><p>n很大很大，给了flag范围，可以得出flag为359位</p><p>素数都是128，利用3个素数（大约384位）即可比flag大</p><p>可以直接爆破</p><p>（数据太多就不贴了）</p><p>（好多师傅来问我最后为什么求出来是0，一看他们都是找出了所有素数，而且过程中都除以了n，导致最后n=1，这点需要注意）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># n =</span><br><span class="hljs-comment"># e = </span><br><span class="hljs-comment"># c = </span><br><span class="hljs-comment"># primes =</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> primes:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> primes:<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> primes:<br>            tn=i*j*k<br>            phi=(i-<span class="hljs-number">1</span>)*(j-<span class="hljs-number">1</span>)*(k-<span class="hljs-number">1</span>)<br>            m=long_to_bytes(<span class="hljs-built_in">pow</span>(c,invert(e,phi),tn))<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;BaseCTF&#x27;</span> <span class="hljs-keyword">in</span> m:<br>                <span class="hljs-built_in">print</span>(m)<br>                exit()<br></code></pre></td></tr></table></figure><h3 id="basic">basic</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> socketserver<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> string<br><br>flag = os.getenv(<span class="hljs-string">&#x27;GZCTF_FLAG&#x27;</span>).encode()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span>(socketserver.BaseRequestHandler):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_recvall</span>(<span class="hljs-params">self</span>):<br>        BUFF_SIZE = <span class="hljs-number">2048</span><br>        data = <span class="hljs-string">b&#x27;&#x27;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            part = <span class="hljs-variable language_">self</span>.request.recv(BUFF_SIZE)<br>            data += part<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(part) &lt; BUFF_SIZE:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> data.strip()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">self, msg, newline=<span class="hljs-literal">True</span></span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> newline:<br>                msg += <span class="hljs-string">b&#x27;\n&#x27;</span><br>            <span class="hljs-variable language_">self</span>.request.sendall(msg)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">recv</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._recvall()<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle</span>(<span class="hljs-params">self</span>):<br>        printable_chars = string.ascii_letters + string.digits + string.punctuation<br>        optional=[<span class="hljs-string">b&#x27;A&#x27;</span>,<span class="hljs-string">b&#x27;B&#x27;</span>,<span class="hljs-string">b&#x27;C&#x27;</span>,<span class="hljs-string">b&#x27;D&#x27;</span>]<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>            secret= <span class="hljs-string">&#x27;&#x27;</span>.join(random.choices(printable_chars, k=<span class="hljs-number">16</span>)).encode()<br>            select=random.choice(optional)<br>            <span class="hljs-variable language_">self</span>.send(select)<br>            enc=<span class="hljs-string">b&#x27;&#x27;</span><br>            <span class="hljs-keyword">if</span> select==<span class="hljs-string">b&#x27;A&#x27;</span>:<br>                enc=base64.b64encode(secret)<br>            <span class="hljs-keyword">elif</span> select==<span class="hljs-string">b&#x27;B&#x27;</span>:<br>                enc=secret.<span class="hljs-built_in">hex</span>().encode()<br>            <span class="hljs-keyword">elif</span> select==<span class="hljs-string">b&#x27;C&#x27;</span>:<br>                enc=bytes_to_long(secret)<br>                enc=<span class="hljs-built_in">str</span>(enc).encode()<br>            <span class="hljs-keyword">elif</span> select==<span class="hljs-string">b&#x27;D&#x27;</span>:<br>                enc=[i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> secret]<br>                enc=<span class="hljs-built_in">str</span>(enc).encode()<br>            <span class="hljs-variable language_">self</span>.send(enc)<br>            client_send=<span class="hljs-variable language_">self</span>.recv()<br>            <span class="hljs-keyword">if</span> client_send!=secret:<br>                <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">&quot;\nYou wrong!!!!!&quot;</span>)<br>                exit()<br><br>        <span class="hljs-variable language_">self</span>.send(flag)<br>        <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&quot;\nConnection has been closed  =.=  &quot;</span>)<br>        <span class="hljs-variable language_">self</span>.request.close()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    HOST, PORT = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">9999</span><br>    server = ForkedServer((HOST, PORT), Task)<br>    server.allow_reuse_address = <span class="hljs-literal">True</span><br>    server.serve_forever()<br></code></pre></td></tr></table></figure><p>一道交互题，四种加密方式</p><p>主要实现四种加密方式</p><p>A：base64</p><p>B：直接转成十六进制</p><p>C：转成整型</p><p>D：每个字符转成ascii码</p><p>主要考察pwntools的使用</p><p>（本人抽象代码，请谅解）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> ast<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>rem=remote(<span class="hljs-string">&quot;&quot;</span>,)<br><br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    a=rem.recvline().decode().strip()<br>    <span class="hljs-built_in">print</span>(a,end=<span class="hljs-string">&quot; &quot;</span>)<br>    b=rem.recvline()<br>    <span class="hljs-keyword">if</span> a==<span class="hljs-string">&#x27;A&#x27;</span>:<br>        b=base64.b64decode(b)<br>    <span class="hljs-keyword">elif</span> a==<span class="hljs-string">&#x27;B&#x27;</span>:<br>        b=<span class="hljs-built_in">bytes</span>.fromhex(b.decode().strip())<br>    <span class="hljs-keyword">elif</span> a==<span class="hljs-string">&#x27;C&#x27;</span>:<br>        b=<span class="hljs-built_in">int</span>(b.decode().strip())<br>        b=long_to_bytes(b)<br>    <span class="hljs-keyword">elif</span> a==<span class="hljs-string">&#x27;D&#x27;</span>:<br>        b=ast.literal_eval(b.decode().strip())<br>        c=<span class="hljs-string">b&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> b:<br>            c+=long_to_bytes(i)<br>        b=c<br>    <span class="hljs-built_in">print</span>(b)<br>    rem.send(b)<br><span class="hljs-built_in">print</span>(rem.recvall())<br>rem.interactive()<br></code></pre></td></tr></table></figure><h3 id="try_to_factor">try_to_factor</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><br>flag=<span class="hljs-string">b&#x27;BaseCTF&#123;&#125;&#x27;</span>+random.randbytes(<span class="hljs-number">64</span>)<br>m=bytes_to_long(flag)<br><br>p,q,r,s,t=[getStrongPrime(<span class="hljs-number">512</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)]<br>N=p*q*r*s*t<br><br>n=p*q<br>e=<span class="hljs-number">65537</span><br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><br><br>gift=random.randint(<span class="hljs-number">2</span>,n)*(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)*(r-<span class="hljs-number">1</span>)*(s-<span class="hljs-number">1</span>)*(t-<span class="hljs-number">1</span>)<br><span class="hljs-keyword">while</span> gift%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>:<br>    gift//=<span class="hljs-number">2</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;N =&quot;</span>,N)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c =&quot;</span>,c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;gift =&quot;</span>,gift)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">N = 162692163428762295773992659007654377270271126313772302197255271375236131917158614424426498628778734679898165422129699410934825650141972454562350664161510689489443251515884304101827584411577749250383438126881931889798597627663578045519256806107514170414321556291545302688028088470848270636776466672843710163017531472049823632822203461654253767303314505996071453898533003519236112138591066133289040889933161978131399309340741554076140734156174295730180874473301361701867633594222054688204666518058106672165786417002466165926062199279674267145233283545524775943767021416906072142236079753359492846480515376121887507681663761713445807717270089017438999615422884163666812016989696908657065537508715229685120221307021151610089917537155165897740417480127289719971512938348936259</span><br><span class="hljs-string">c = 113962118676826667648935023618252851875440854724310328843964819392166304653581141146631375503931008732348730639629174670963727399860571217264854300057305570824097216782800531930906801885967717639795643406206813677461127762087560021634738167845077869308515223303820469892552545806179267969169748886980836435095</span><br><span class="hljs-string">gift = 863514692222931709925579242743251211976114217396765747601042357918763818732391790491059528595917786523674732369068315533549380754409535403506339052401422249684188032949680148055803474336983973622610403448963752802490806614810077181934627694570685722842963961551889267501616799757825675192653489096007790143775773378495299981666657347802233798206597104474595281241837323214457344961462510183726339545608046357281265026013496037522835659867389206279894057481600882665189079672009577651494435000349624334685832217586703242422260870866432379257259316411280539845741932725104662417642890238587876489774492067722351467773093391502588019563488688309892102039611978767690653206664257400163618467825666105966072942726011447079204869750153256054140924951306811971422635104088608275908232688385437145325481792836532453258784103533536292492138405929815964841772656055397705840797739586953744563989819811944946916720655079908564653686456283647030055622241840292127096994325415897266379446446435164189216562921252341705747891518007710533906231225283309180960546212899099652226954393826875</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>（此题算是临时加的，因为我做不出moectf第二周的题，想着增加点难度？所以我一开始就是准备给论文的，如果你能够认真静下心来看完论文，应该就可以解决这个问题了。论文中给出了算法流程，并不需要搞懂原理就可以出，很多师傅找的模板也是可以用的，将gift每次乘2爆破就行，我这里只是稍微改了一下希望不是拿到模板能直接出的那种。最后如果让你感到了不好的体验，我在这道个歉。</p><p>关于N和<spanclass="math display">\[\phi(n)\]</span>进行分解的脚本，当然可以直接用，可以直接进行爆破x倍的2，然后套脚本也是可以的。我这里只是稍稍微魔改了一点。这里面也有很多脚本，感兴趣可以多看看</p><p>https://github.com/jvdsn/crypto-attacks/blob/master/attacks/factorization/known_phi.py）</p><p>先贴一下论文<ahref="https://link.springer.com/content/pdf/10.1007/3-540-36492-7_25.pdf">3-540-36492-7_25.pdf(springer.com)</a>，主要是其中的第三部分</p><p>当然看不懂论文也没事，不过可以适当看一下2-Prime和3-Prime的部分，能够按算法流程实现就可以得到flag，主要是思想。</p><p>先从后往前看，最后对flag进行了2个素数的rsa加密，给了一个gift为k倍的<spanclass="math display">\[\phi(n)\]</span>除去x倍的2。</p><p>从这里我们就可以看出来，要根据给的这个gift和之前的N来分解出p和q。</p><p>（分解出来是5个数，爆破一下就可以了）</p><p>算法流程：</p><p><span class="math display">\[我们可以知道：k\phi(n)=2^x*gift\\每一次分解时：随机取一个数w\in[2,N-2]\\计算数a_1=w^{2^s*gift}\mod N\quad for\quad s=0,1... until\quada_1\equiv1\mod N\\当结束后如果s=0则说明算法失效，一般为重新选取w。\\计算a_2\equiv w^{2^{s-1}*gift}\mod N\\保证a_2\not\equiv\pm1，则gcd(N,a_2+1)就是N的一个分解。\\由于一开始N不止有两个素数，所以这里需要判断一下分解出来的是不是素数。\]</span> 个人理解： <span class="math display">\[当a_1\equiv1\mod 时，a_1就是模N下的平凡平方根\\通过计算我们知道a_1\equiv a_2^2\equiv1\mod N\\因为N是合数，只要a_2\not\equiv\pm1\mod N，则a_2称为模N下的非平凡平方根\\（这里只需要判断a_2\not\equiv1\modN,因为出计算a_1时已经计算过一遍a_2不等于1了)\\得a_2^2-1\equiv(a_2+1)*(a_2-1)\equiv0\mod N\\得(a_2+1)*(a_2-1)=kN，因为N为合数\\得a_2+1=x或者a_2-1=x，这里x指kN中的一个因数\\那么我们通过求解gcd(N,a_2+1)或者gcd(N,a_2-1)就可以得到N的分解了\\（所以算法中gcd中的a_2+1改成a_2-1也是可行的）\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randrange<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_factors</span>(<span class="hljs-params">N, gift</span>):<br>    ans=[]<br>    factors=[N]<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(factors)&gt;<span class="hljs-number">0</span>:<br>        N=factors[<span class="hljs-number">0</span>]<br>        w = randrange(<span class="hljs-number">2</span>, N - <span class="hljs-number">1</span>)<br><br>        s = <span class="hljs-number">0</span><br>        a_1 = <span class="hljs-built_in">pow</span>(w, gift * <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,s), N)<br>        <span class="hljs-keyword">while</span> a_1!=<span class="hljs-number">1</span>:<br>            s=s+<span class="hljs-number">1</span><br>            a_1 = <span class="hljs-built_in">pow</span>(w, gift * <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,s), N)<br>        <br>        <span class="hljs-keyword">if</span> s!=<span class="hljs-number">0</span>:<br>            a_2 = <span class="hljs-built_in">pow</span>(w, gift * <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,s-<span class="hljs-number">1</span>), N)<br>            <span class="hljs-keyword">if</span> a_2!=N-<span class="hljs-number">1</span>:<br>                p = gcd(N, a_2 + <span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">if</span> p!=<span class="hljs-number">1</span>:<br>                    q=N//p<br>                    factors=factors[<span class="hljs-number">1</span>:]<br>                    <span class="hljs-keyword">if</span> isPrime(p):<br>                        ans.append(p)<br>                    <span class="hljs-keyword">else</span>:<br>                        factors.append(p)<br>                    <span class="hljs-keyword">if</span> isPrime(q):<br>                        ans.append(q)<br>                    <span class="hljs-keyword">else</span>:<br>                        factors.append(q)<br>    <span class="hljs-keyword">return</span> ans<br>N = <span class="hljs-number">162692163428762295773992659007654377270271126313772302197255271375236131917158614424426498628778734679898165422129699410934825650141972454562350664161510689489443251515884304101827584411577749250383438126881931889798597627663578045519256806107514170414321556291545302688028088470848270636776466672843710163017531472049823632822203461654253767303314505996071453898533003519236112138591066133289040889933161978131399309340741554076140734156174295730180874473301361701867633594222054688204666518058106672165786417002466165926062199279674267145233283545524775943767021416906072142236079753359492846480515376121887507681663761713445807717270089017438999615422884163666812016989696908657065537508715229685120221307021151610089917537155165897740417480127289719971512938348936259</span><br>c = <span class="hljs-number">113962118676826667648935023618252851875440854724310328843964819392166304653581141146631375503931008732348730639629174670963727399860571217264854300057305570824097216782800531930906801885967717639795643406206813677461127762087560021634738167845077869308515223303820469892552545806179267969169748886980836435095</span><br>gift = <span class="hljs-number">863514692222931709925579242743251211976114217396765747601042357918763818732391790491059528595917786523674732369068315533549380754409535403506339052401422249684188032949680148055803474336983973622610403448963752802490806614810077181934627694570685722842963961551889267501616799757825675192653489096007790143775773378495299981666657347802233798206597104474595281241837323214457344961462510183726339545608046357281265026013496037522835659867389206279894057481600882665189079672009577651494435000349624334685832217586703242422260870866432379257259316411280539845741932725104662417642890238587876489774492067722351467773093391502588019563488688309892102039611978767690653206664257400163618467825666105966072942726011447079204869750153256054140924951306811971422635104088608275908232688385437145325481792836532453258784103533536292492138405929815964841772656055397705840797739586953744563989819811944946916720655079908564653686456283647030055622241840292127096994325415897266379446446435164189216562921252341705747891518007710533906231225283309180960546212899099652226954393826875</span><br><br><br>primes=my_factors(N,gift)<br><span class="hljs-built_in">print</span>(primes)<br>permutation=itertools.combinations(primes,<span class="hljs-number">2</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> permutation:<br>    p,q=i<br>    p,q=<span class="hljs-built_in">int</span>(p),<span class="hljs-built_in">int</span>(q)<br>    flag=long_to_bytes(<span class="hljs-built_in">pow</span>(c,inverse(<span class="hljs-number">65537</span>,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)),p*q))<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;BaseCTF&#x27;</span> <span class="hljs-keyword">in</span> flag:<br>        <span class="hljs-built_in">print</span>(flag)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-comment">#b&#x27;BaseCTF&#123;ed4bff90-d1f4-4f0f-a3bd-999c54d9eeb7&#125;;\xef\xd7&quot;X\xceglz\xc2l\xc3\xf0\x04\n$I\x00\xda\rT\xc5\xef\xc9t]\x0c\xae@\xdcO5\x02\xa8\xd6/&#123;5\xacD5\xda\x11&#123;\x80\x80\xa3\t#\x97\x871L\x10\r\x122z\xe1\x89%\x85\xdb\x94&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="week3">week3</h2><h3 id="没有n啊">没有n啊</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><br>flag=<span class="hljs-string">b&#x27;BaseCTF&#123;&#125;&#x27;</span><br>m=bytes_to_long(flag)<br><br>p=getPrime(<span class="hljs-number">512</span>)<br>q=getPrime(<span class="hljs-number">512</span>)<br><br>n=p*q<br>e=<span class="hljs-number">65537</span><br><br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gmpy2.invert(e,phi)<br><br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br>x=<span class="hljs-built_in">pow</span>(n,e,c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c =&quot;</span>,c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e =&quot;</span>,e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;d =&quot;</span>,d)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x =&quot;</span>,x)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">c = 52453423663797600504896811946820841317615798875871627840172711423749946998217916744135290476795328543876098295227017753117609268701786914053599060330837226980969490439739651088710549890669593587642238827462108900683237797139569260570711611781514337884756698142193277516649805710242748531658979160170193283558</span><br><span class="hljs-string">e = 65537</span><br><span class="hljs-string">d = 54297831548863701092644190086258072883163378307246681513317422545902442650340916001357605211715836911877651782099787873046987096258918495734824011752504203578982947618784736181975847356304742402103468329660346526185908618978851982007496096394151821403282347897417590596861323293706611997134962231129075032641</span><br><span class="hljs-string">x = 40635864473997460751766935373772107585133301579524000836637683731949939348171187931595274511243052505604832873086269554842194695737052043633079044688826020656068356561856848814530947955429343483847291398607359454851926470168457852479044154798114087493843073091985855839008222762224952503563764527380033064437</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><span class="math display">\[n=c+a\\x=n^e\quad mod(c)\\二项式定理：x=a^e\quad mod(c)\\e*d_c=1\quad mod(\phi(c))\\x^{d_c}=a^{e*d_c}=a\quad mod(c)\]</span></p><p><span class="math inline">\(\phi(c)\)</span>可以通过网站在线分解</p><p>也可以直接利用sage中euler_phi()求解，就是时间有点久</p><blockquote><p><a href="http://www.factordb.com/index.php">factordb.com</a></p></blockquote><p>之后给了d就正常解了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><br>c = <span class="hljs-number">52453423663797600504896811946820841317615798875871627840172711423749946998217916744135290476795328543876098295227017753117609268701786914053599060330837226980969490439739651088710549890669593587642238827462108900683237797139569260570711611781514337884756698142193277516649805710242748531658979160170193283558</span><br>e = <span class="hljs-number">65537</span><br>d = <span class="hljs-number">54297831548863701092644190086258072883163378307246681513317422545902442650340916001357605211715836911877651782099787873046987096258918495734824011752504203578982947618784736181975847356304742402103468329660346526185908618978851982007496096394151821403282347897417590596861323293706611997134962231129075032641</span><br>x = <span class="hljs-number">40635864473997460751766935373772107585133301579524000836637683731949939348171187931595274511243052505604832873086269554842194695737052043633079044688826020656068356561856848814530947955429343483847291398607359454851926470168457852479044154798114087493843073091985855839008222762224952503563764527380033064437</span><br><br>phic=(<span class="hljs-number">2</span>-<span class="hljs-number">1</span>)*(<span class="hljs-number">3</span>-<span class="hljs-number">1</span>)*(<span class="hljs-number">73</span>-<span class="hljs-number">1</span>)*(<span class="hljs-number">3967</span>-<span class="hljs-number">1</span>)*(<span class="hljs-number">6373</span>-<span class="hljs-number">1</span>)*(<span class="hljs-number">95592293</span>-<span class="hljs-number">1</span>)*(<span class="hljs-number">216465863</span>-<span class="hljs-number">1</span>)*(<span class="hljs-number">4744823012787277141</span>-<span class="hljs-number">1</span>)*(<span class="hljs-number">48245998253859255581546561942142167304434549996919484957120717763726325509833409296170471619434291990255044694414983821250538266717293535917534918221352198192885071310932646412147737114561229291373456448363184353049796801297876664512630305475226391199481032049429</span>-<span class="hljs-number">1</span>)<br><span class="hljs-comment">#phic=euler_phi(c)</span><br>dc=gmpy2.invert(e,phic)<br>a=<span class="hljs-built_in">pow</span>(x,dc,c)<br><br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,a+c)))<br></code></pre></td></tr></table></figure><h3 id="exgcd">exgcd</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag=<span class="hljs-string">b&#x27;BaseCTF&#123;&#125;&#x27;</span><br>m=bytes_to_long(flag)<br><br>p=getPrime(<span class="hljs-number">1024</span>)<br>q=getPrime(<span class="hljs-number">1024</span>)<br><br>n=p*q<br>e1=<span class="hljs-number">3747</span><br>e2=<span class="hljs-number">2991</span><br><br>c1=<span class="hljs-built_in">pow</span>(m,e1,n)<br>c2=<span class="hljs-built_in">pow</span>(m,e2,n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n =&quot;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e1 =&quot;</span>,e1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e2 =&quot;</span>,e2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c1 =&quot;</span>,c1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c2 =&quot;</span>,c2)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">n = 27855350163093443890983002241607629119744539643165776358993469078731521668677421483556132628708836721737685936980427467856642738196111748018522018598646125626995613169001111504706363742194664774823604738939411512861441742683157275818500991834651769368178320088982759626122029956515159435424882855075032400667120376075618896752694718491438251810609878021717559466498493103257912108879328270813061231904227056671621363669388496383136964549879459562004569059185078204867346250733489663015417879915436157806942021693920206071715538430633494012923651469196048546309592946901609803631751035364478773126967010589504275776307</span><br><span class="hljs-string">e1 = 3747</span><br><span class="hljs-string">e2 = 2991</span><br><span class="hljs-string">c1 = 24426579024062518665031958216110619832653602343205488454298659533869220501923184793828421371206493659949730138867555889074137026401207985428160803910695088081370233571905915349589146504374710444468715701305061060934519410886010929009297226496448218819742287990364436349188987723637449590579092391100714056589967894609950537021838172987840638735592599678186555961654312442380755963257875487240962193060914793587712733601168204859917001269928487633954556221987632934190217367502677285906521385169669644977192556145782303526375491484736352799180747403161343130663661867413380222714012960607473395828938694285120527085083</span><br><span class="hljs-string">c2 = 6932145147126610816836065944280934160173362059462927112752295077225965836502881335565881607385328990881865436690904056577675885697508058289570333933837515526915707121125766720407153139160751343352211421901876051228566093038929625042619250168565502734932197817082848506826847112949495527533238122893297049985517280574646627011986403578166952789317461581409161873814203023736604394085875778774834314777046086921852377348590998381648241629124408514875110073073851913857329679268519229436092660959841766848676678740851087184214283196544821779336090434587905158006710112461778939184327386306992082433561460542130441825293</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>共模攻击，但<span class="math display">\[e_1和e_2不互素\]</span><span class="math display">\[c_1=m^{e1}\mod n\\c_2=m^{e2}\mod n\\通过扩展欧几里得计算：s_1*e_1+s_2*e_2=s\\c_1^{s_1}*c_2^{s_2}=m^{s_1*e_1+s_2*e_2}=m^s\]</span></p><p>最后得到的是<spanclass="math inline">\(m^{gcd(e1,e2)}\)</span>，最后开个根即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br>n = <span class="hljs-number">27855350163093443890983002241607629119744539643165776358993469078731521668677421483556132628708836721737685936980427467856642738196111748018522018598646125626995613169001111504706363742194664774823604738939411512861441742683157275818500991834651769368178320088982759626122029956515159435424882855075032400667120376075618896752694718491438251810609878021717559466498493103257912108879328270813061231904227056671621363669388496383136964549879459562004569059185078204867346250733489663015417879915436157806942021693920206071715538430633494012923651469196048546309592946901609803631751035364478773126967010589504275776307</span><br>e1 = <span class="hljs-number">3747</span><br>e2 = <span class="hljs-number">2991</span><br>c1 = <span class="hljs-number">24426579024062518665031958216110619832653602343205488454298659533869220501923184793828421371206493659949730138867555889074137026401207985428160803910695088081370233571905915349589146504374710444468715701305061060934519410886010929009297226496448218819742287990364436349188987723637449590579092391100714056589967894609950537021838172987840638735592599678186555961654312442380755963257875487240962193060914793587712733601168204859917001269928487633954556221987632934190217367502677285906521385169669644977192556145782303526375491484736352799180747403161343130663661867413380222714012960607473395828938694285120527085083</span><br>c2 = <span class="hljs-number">6932145147126610816836065944280934160173362059462927112752295077225965836502881335565881607385328990881865436690904056577675885697508058289570333933837515526915707121125766720407153139160751343352211421901876051228566093038929625042619250168565502734932197817082848506826847112949495527533238122893297049985517280574646627011986403578166952789317461581409161873814203023736604394085875778774834314777046086921852377348590998381648241629124408514875110073073851913857329679268519229436092660959841766848676678740851087184214283196544821779336090434587905158006710112461778939184327386306992082433561460542130441825293</span><br>s,s1,s2=gcdext(e1,e2)<br><br>m=(<span class="hljs-built_in">pow</span>(c1,s1,n)*<span class="hljs-built_in">pow</span>(c2,s2,n))%n<br><br><span class="hljs-built_in">print</span>(long_to_bytes(iroot(m,s)[<span class="hljs-number">0</span>]))<br><span class="hljs-comment">#b&#x27;BaseCTF&#123;feb7e1ae-a8f7-4fc4-8d6d-945a45cc3f6d&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="wiener">wiener?</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> decimal<br>flag=<span class="hljs-string">b&quot;BaseCTF&#123;&#125;&quot;</span><br>m = bytes_to_long(flag)<br><br><br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = getPrime(<span class="hljs-number">1024</span>)<br>n=p*q<br><br>e=<span class="hljs-number">65537</span><br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e =&quot;</span>,e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c =&quot;</span>,c)<br><br>decimal.getcontext().prec = <span class="hljs-number">648</span><br>P=decimal.Decimal(p)<br>Q=decimal.Decimal(q)<br>leak=decimal.Decimal((<span class="hljs-number">3</span>*P*Q-<span class="hljs-number">1</span>)/(<span class="hljs-number">3</span>*Q*Q))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;leak =&quot;</span>,leak)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">e = 65537</span><br><span class="hljs-string">c = 11032748573623426359632659657114807044712138586316710250985606809252700461490504487308849626514319062562557448839550994242999334882617031487618174168038491566640081840111747765753878087564318833273878755416584962921669911444225959335274753391800995531023212276838665202257007640354237043291129197348884914956663597240094662207929658519596987351984403258345205873566463643624175318315064440456858013874962784792564480286904620663695194689839431808082976248378509181327101557380978849545906691903896662095520288964101796965095129861467059775556110616007889846240936219381379219605528051627402300580239311202137582442057</span><br><span class="hljs-string">leak = 0.829374344780877053838760251345359097311540811993463349625630085472892814959843248358036249898871908548743719153319438638517170060651237635838827482534816419091949205584951292517303330452910012749674475329235689229498752425379611083979518257734473992186831474208400813283887045691145481237726578827559198828469462343342343287720369159899636816373592067698883361360269728719786071024354151682314608072902347335691012713629816579496252896260869382806838857194293618332286500427694077400072428506897829689703872985954772105672992293334668485358785863779749153981721900135318166811250762946069962348114491411585418993494561587403918162681937152503739843</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>直接摘抄的wiener攻击的思想，连分数定理： <spanclass="math display">\[\left|a-\frac{c}{d}\right|&lt;\frac{1}{2*d^2}\\可得\frac{c}{d}就是a的一个连分数近似\]</span> （至于定理证明我也不会，不好意思喵）</p><p>推导： <span class="math display">\[leak=\frac{3*P*Q-1}{3*Q*Q}\\leak=\frac{P}{Q}-\frac{1}{3*Q^2}\\\left|leak-\frac{P}{Q}\right|=\frac{1}{3*Q^2}&lt;\frac{1}{2*Q^2}\\之后计算leak的连分数，即可得到p和q\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">11032748573623426359632659657114807044712138586316710250985606809252700461490504487308849626514319062562557448839550994242999334882617031487618174168038491566640081840111747765753878087564318833273878755416584962921669911444225959335274753391800995531023212276838665202257007640354237043291129197348884914956663597240094662207929658519596987351984403258345205873566463643624175318315064440456858013874962784792564480286904620663695194689839431808082976248378509181327101557380978849545906691903896662095520288964101796965095129861467059775556110616007889846240936219381379219605528051627402300580239311202137582442057</span><br>leak = <span class="hljs-number">0.829374344780877053838760251345359097311540811993463349625630085472892814959843248358036249898871908548743719153319438638517170060651237635838827482534816419091949205584951292517303330452910012749674475329235689229498752425379611083979518257734473992186831474208400813283887045691145481237726578827559198828469462343342343287720369159899636816373592067698883361360269728719786071024354151682314608072902347335691012713629816579496252896260869382806838857194293618332286500427694077400072428506897829689703872985954772105672992293334668485358785863779749153981721900135318166811250762946069962348114491411585418993494561587403918162681937152503739843</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>cf = continued_fraction(leak)<br>convers = cf.convergents()<br><span class="hljs-keyword">for</span> pkd <span class="hljs-keyword">in</span> convers:<br>    <span class="hljs-comment"># possible k, d</span><br>    pp, pq = pkd.as_integer_ratio()<br>    pp=<span class="hljs-built_in">int</span>(pp)<br>    <span class="hljs-keyword">if</span> pp.bit_length()==<span class="hljs-number">1024</span> <span class="hljs-keyword">and</span> isPrime(pp):<br>        flag=long_to_bytes(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(c,inverse(e,pp-<span class="hljs-number">1</span>),pp)))<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;Base&#x27;</span> <span class="hljs-keyword">in</span> flag:<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br><span class="hljs-comment">#b&#x27;BaseCTF&#123;9431ee53-5d5c-4b0b-956f-1eafff6c9e87&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="没有n啊_pro">没有n啊_pro</h3><blockquote><p>前言：</p><p>在之前西瓜杯的比赛中我出一次这个题，然后在前几天sigenzhe师傅在我博客低下说了另一种不用给x的解法，所以我重新生成了一下数据搬了过来，感谢sigenzhe师傅。</p><p>当时博客里的sigenzhe师傅的原话：</p><p>《给你d又怎样》 这道题可以不要 hint 也能做出来。n为256位，那phi(n)的位数在256、255、254这个区间内。有了e和d，ed=k *phi(n) + 1 。且 k &lt; e 可以通过爆破k的方法 得到几十个可能的 phi(n)。而且最重要是 phi(n)的位数小于256，是可以分解的，phi(n) = (p-1) * (q-1)，那我们通过组合phi(n)的因子，就有可以得到（p-1) 。最终检测退出的条件是，因子组合排列相乘，只要位数是128 且 +1后是素数即可。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><br>flag=<span class="hljs-string">b&#x27;BaseCTF&#123;&#125;&#x27;</span><br>m=bytes_to_long(flag)<br>p=getPrime(<span class="hljs-number">128</span>)<br>q=getPrime(<span class="hljs-number">128</span>)<br><br>n=p*q<br>e=<span class="hljs-number">65537</span><br><br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gmpy2.invert(e,phi)<br><br><span class="hljs-keyword">assert</span> d&lt;phi<br><br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c =&quot;</span>,c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e =&quot;</span>,e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;d =&quot;</span>,d)<br></code></pre></td></tr></table></figure><p><span class="math display">\[已知：e*d\equiv1\mod\phi(n)\\那么e*d=1+k*\phi(n)，k*\phi(n)=e*d-1\\为了方便想我还给了一个条件d&lt;\phi(n)\\可以得到k&lt;e，我们通过遍历e的范围即可得到多个k_i\phi(n)\\\phi(n)的范围可以推测为256\\之后可以求解\phi(n)的全分解，对全分解进行排列组合即可得到\]</span></p><blockquote><p>当然也可以直接对e*d-1进行分解然后排列组合，但好像耗时比较长</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> itertools<br>c = <span class="hljs-number">78919950899709764543039048006935881842075789773495004639436106636461009323420</span><br>e = <span class="hljs-number">65537</span><br>d = <span class="hljs-number">13002488326322253055272696035053386340217207134816593767440035447757509399233</span><br>p_bits=<span class="hljs-number">128</span><br>q_bits=<span class="hljs-number">128</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_phi</span>(<span class="hljs-params">e, d</span>):<br>    k_phi = e*d -<span class="hljs-number">1</span><br>    result = []<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(e,<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> k_phi % k == <span class="hljs-number">0</span>:<br>            tmp = k_phi // k<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(tmp).bit_length()==p_bits+q_bits:<br>                result.append(tmp)<br>    <span class="hljs-keyword">return</span> result<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    phi_list = get_phi(e,d)  <span class="hljs-comment">#获得可能的phi_n列表</span><br>    count = <span class="hljs-built_in">len</span>(phi_list)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;一共有<span class="hljs-subst">&#123;count&#125;</span>个可能的phi&#x27;</span>)<br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> phi <span class="hljs-keyword">in</span> phi_list:<br>        count += <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;count&#125;</span> 正在尝试爆破 <span class="hljs-subst">&#123;phi&#125;</span>&#x27;</span>)<br>        factors = factor(phi)  <span class="hljs-comment"># 分解phi_n得到质因子列表</span><br>        result = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> factors:<br>            num, times = <span class="hljs-built_in">int</span>(i[<span class="hljs-number">0</span>]), i[<span class="hljs-number">1</span>]<br>            result += [num] * times<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(factors)&gt;<span class="hljs-number">1</span>:<br>            s = <span class="hljs-built_in">set</span>()<br>            <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(result) + <span class="hljs-number">1</span>):<br>                combination = <span class="hljs-built_in">list</span>(itertools.combinations(result, r))<br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> combination:<br>                    s.add(i)<br>            ans=[]<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>                tmp=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> i:<br>                    tmp=tmp*j<br>                ans.append(tmp)<br>            <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> ans:<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(num+<span class="hljs-number">1</span>).bit_length()==p_bits <span class="hljs-keyword">and</span> is_prime(num+<span class="hljs-number">1</span>):<br>                    p = num+<span class="hljs-number">1</span><br>                    q = phi // num + <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">if</span> is_prime(q):<br>                        n = p * q<br>                        flag=long_to_bytes(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(c,d,n)))<br>                        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;BaseCTF&#x27;</span> <span class="hljs-keyword">in</span> flag:<br>                            <span class="hljs-built_in">print</span>(flag)<br>                            <span class="hljs-keyword">return</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><span class="hljs-comment">#b&#x27;BaseCTF&#123;3e226a94-babb27696416&#125;&#x27;</span><br><br></code></pre></td></tr></table></figure><h2 id="week4">week4</h2><h3 id="哎呀数据丢失了">哎呀数据丢失了</h3><p>具体分析我就不说了，最简单的证书分析，base64解码后前三个数据分别就是n,e,d。贴一篇文章：https://tover.xyz/p/pem-by-hand/说几句证书相关的关键点，一般来说手撕确实的证书分析就是把数据base64解密一下再转十六进制分析。接下来就是找02开头的数据，然后看02后面的数据是不是跟着长度（一般根据n的bits来判断）如果不对，那就从新开始，删去第一个字符在进行base64解密，依次反复知道正确。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><br><br>n=<span class="hljs-number">0x00bd278484122aef9a69ec647290219ded06edd2b7611721b326850b2f5060daeed7694356667c479ca9ccb6969f4fbe6dc7fa6759aca21d8a96a881a8e4a0217732757e649d503191511fa96da42ed1da2fa3bc8c9c65fbd9c0dd6f430359ac45e455d32c5b0ea29d21e647ff80e50abcbb80f76adb67007a04e85dbaeb4c8f1d</span><br>e=<span class="hljs-number">0x010001</span><br>d=<span class="hljs-number">0x2265e355593071ae3501062b4746b5bf7af918cebc5b46879bc3aa0b0aa4f26b68c4fdb7e29f4b2e943a6421f40abe689c6b4f0c21b6c184886d5056f46ca26908540ec07b82ad47e667971a01fac6162e93a7fc61aed5660f826aeba34d78accd18fc59e7921701f10ff51d52883706b864287cfdb34e309c93829d29d867c9</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;out&quot;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    c=f.read()<br>    m=bytes_to_long(c)<br>    <span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(m,d,n)))<br><br><span class="hljs-string">&quot;&quot;&quot;30 </span><br><span class="hljs-string">82 025c </span><br><span class="hljs-string">0201 00 </span><br><span class="hljs-string">02 81 81 00bd278484122aef9a69ec647290219ded06edd2b7611721b326850b2f5060daeed7694356667c479ca9ccb6969f4fbe6dc7fa6759aca21d8a96a881a8e4a0217732757e649d503191511fa96da42ed1da2fa3bc8c9c65fbd9c0dd6f430359ac45e455d32c5b0ea29d21e647ff80e50abcbb80f76adb67007a04e85dbaeb4c8f1d</span><br><span class="hljs-string">02 03 010001</span><br><span class="hljs-string">02 81 80 2265e355593071ae3501062b4746b5bf7af918cebc5b46879bc3aa0b0aa4f26b68c4fdb7e29f4b2e943a6421f40abe689c6b4f0c21b6c184886d5056f46ca26908540ec07b82ad47e667971a01fac6162e93a7fc61aed5660f826aeba34d78accd18fc59e7921701f10ff51d52883706b864287cfdb34e309c93829d29d867c9</span><br><span class="hljs-string">02 41 00c6e091a25cd8e75937af8370674f71ff000ce87a49a8374e654fe3b1877c63813c895c3cb83da4c3bc457aeedef78574bba69b1ac3a21d3fcd0b3a1ffa05aa93</span><br><span class="hljs-string">02 41 00f37c0714f1d2e836e73a806ddb3509245539ceb363623d3e4f7887456580519cb513f6564508c8d5ea6b9ccb0b67b58168243bb96d61e8db6377413bbb95fd8f</span><br><span class="hljs-string"></span><br><span class="hljs-string">02404e066d1cb630a3136db57e6beb1c5</span><br><span class="hljs-string">02d2b67e50d953859fa77e50fffe697f6b20d7e16a1fbe6b36dd7bfaaab6ceecf7d2ce200984f889ad11d30fa6cf13aa7e1</span><br><span class="hljs-string">024100a3c4583f0e27fd68703e3903aadd11390ed9c2dd858b1e063b0da66e56c6e81daeedae52783c60590143404291793febba5</span><br><span class="hljs-string">0249ba3a6a72868ce5d61ffd9f2a1</span><br><span class="hljs-string">0240369cfe9a217</span><br><span class="hljs-string">02c39b0d07fdf8a4d82fe362177dd92fc82</span><br><span class="hljs-string">02d699914b9a634016f6e30e270bde8c2d0068743a77d2fa8831cba75536e0f2f1578ddd4e4b5e7685&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="rabin">rabin</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><br>flag=<span class="hljs-string">b&quot;BaseCTF&#123;&#125;&quot;</span><br>m = bytes_to_long(flag)<br><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br><span class="hljs-keyword">assert</span> p%<span class="hljs-number">4</span>==<span class="hljs-number">3</span> <span class="hljs-keyword">and</span> q%<span class="hljs-number">4</span>==<span class="hljs-number">3</span><br>n = p*q<br>e = <span class="hljs-number">4</span><br><br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p=&quot;</span>,p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;q=&quot;</span>,q)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n=&quot;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c=&quot;</span>,c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e=&quot;</span>,e)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">p= 8531212975719216550108614256955774722172741885676113601617182716356239301381951899737237219659253655889636684200345109462928796329670321336864298557778843</span><br><span class="hljs-string">q= 7443256287912111739335729314443559886458007838130371799255078565502662459436043455787869631999073617967343884377537828940738213460508765519478956421282871</span><br><span class="hljs-string">n= 63500004625039456439237191267891267558404574431112995926594213383621331385226487443753506088788203040258384788149958095020759745138424276657604371402824844725005596890673468964961037168078105356669148960568974603581485045691990626520286184874115519591663033533771400334558853058140717812903874350138362098253</span><br><span class="hljs-string">c= 51452608438757130697131508192775727191605112918772187364577097224326062184288501602000700342623122861398852536963355962672293705131887315354242193416090384360837672258861475017098419459125395949090523474744886423754439919504732741712693909507972791203801494594878447921609420574365853676576693694677914169353</span><br><span class="hljs-string">e= 4</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>高次rabin攻击</p><blockquote><p>详见：<a href="https://www.nssctf.cn/note/set/7">文章列表 |NSSCTF</a></p></blockquote><p>$$ cm<sup>4x</sup>2n\ cm<sup>4x</sup>2p\ 可得这条结论c^{}p\（详细证明看上面NSSCTF中xenny师傅的文章）\ x<sup>2cc</sup>{}*cc^{}p\由条件p，可知c^{}可以进行开方\ 得：x_1c<sup>{}p和x_2(p-c</sup>{})p\同理得：x_3c<sup>{}q和x_4(q-c</sup>{})q\</p><p>之后对x_1,x_2,x_3,x_4都再进行一次rabin就可以得到16个m_i\进行筛选可得最终flag $$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> math<br><br>p= <span class="hljs-number">7069399887135404147313451925856463790122288322955120353958439275669624760478622857767374372872346990136954266792268812402268519788981659317134531701377703</span><br>q= <span class="hljs-number">7140401794925570651681210965995716787861669619864423417950517149172165700476247742598189428763096590450485848849559705021102255619953633260576326755189491</span><br>n= <span class="hljs-number">50478355643148266354923007679620780526141911052216183219350733856301203909504117920782157926474133059342037694939720794471142298089233400685616528009799838411628460021560455031638939642439782783664643276781622313533393143794433785002028042268329216889290321025657400866309989050114906562764560145969527319173</span><br>c= <span class="hljs-number">4087656016708624348430154736700209864616058176527780296412388210036556189223356217878476122554309456912053098904757651242467846016533157893713565869179648449607552843430116377433424175512165110689917185788645907642250661954679293286430479127383793220643392349769864898681882146542120386576626400193522553192</span><br>e= <span class="hljs-number">16</span><br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rabin</span>(<span class="hljs-params">c</span>):<br>    m1 = <span class="hljs-built_in">pow</span>(c, (p + <span class="hljs-number">1</span>) // <span class="hljs-number">4</span>, p)<br>    m2 = p-<span class="hljs-built_in">pow</span>(c, (p + <span class="hljs-number">1</span>) // <span class="hljs-number">4</span>, p)<br>    m3 = <span class="hljs-built_in">pow</span>(c, (q + <span class="hljs-number">1</span>) // <span class="hljs-number">4</span>, q)<br>    m4 = q-<span class="hljs-built_in">pow</span>(c, (q + <span class="hljs-number">1</span>) // <span class="hljs-number">4</span>, q)<br><br>    <span class="hljs-keyword">return</span> m1,m2,m3,m4<br><br>cs = [c]<br>lge=math.log(e,<span class="hljs-number">2</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">int</span>(lge)):<span class="hljs-comment">#range里放log2e</span><br>    t = <span class="hljs-built_in">set</span>()<br>    <span class="hljs-keyword">for</span> c2 <span class="hljs-keyword">in</span> cs:<br>        x = rabin(c2)<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> x:<br>            t.add(j)<br>    cs = <span class="hljs-built_in">list</span>(t)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cs:<br>    flag=long_to_bytes(i)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;BaseCTF&#x27;</span> <span class="hljs-keyword">in</span> flag:<br>        <span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment">#BaseCTF&#123;01c28b9c-7924-4c04-b71d-1cca15342618&#125;</span><br><br><br></code></pre></td></tr></table></figure><h3 id="extendmd5">extendmd5</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> socketserver<br><span class="hljs-keyword">import</span> signal<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> random <br>flag = os.getenv(<span class="hljs-string">&#x27;GZCTF_FLAG&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span>(socketserver.BaseRequestHandler):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_recvall</span>(<span class="hljs-params">self</span>):<br>        BUFF_SIZE = <span class="hljs-number">2048</span><br>        data = <span class="hljs-string">b&#x27;&#x27;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            part = <span class="hljs-variable language_">self</span>.request.recv(BUFF_SIZE)<br>            data += part<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(part) &lt; BUFF_SIZE:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> data.strip()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">self, msg, newline=<span class="hljs-literal">True</span></span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> newline:<br>                msg += <span class="hljs-string">b&#x27;\n&#x27;</span><br>            <span class="hljs-variable language_">self</span>.request.sendall(msg)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">recv</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._recvall()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">my_md5</span>(<span class="hljs-params">self,text</span>):<br>        mymd5=hashlib.md5()<br>        mymd5.update(text)<br>        <span class="hljs-keyword">return</span> mymd5.hexdigest()<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle</span>(<span class="hljs-params">self</span>):<br>        signal.alarm(<span class="hljs-number">30</span>)<br><br>        c=random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">64</span>)<br>        want=random.randbytes(c)<br>        want_md5=<span class="hljs-variable language_">self</span>.my_md5(want)<br>        <span class="hljs-variable language_">self</span>.send(want_md5.encode())<br><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&quot;\nPlease input the secret:&quot;</span>)<br>            secret = <span class="hljs-variable language_">self</span>.recv()<br><br>            final=want+secret<br>            final_md5=<span class="hljs-variable language_">self</span>.my_md5(final)<br><br>            <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&quot;\nPlease input your md5:&quot;</span>)<br>            your_md5=<span class="hljs-variable language_">self</span>.recv().decode()<br>            <span class="hljs-keyword">if</span>  final_md5 == your_md5:<br>                <span class="hljs-variable language_">self</span>.send(flag.encode())<br>                <span class="hljs-keyword">break</span><br>        <br>            <br>        <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&quot;\nConnection has been closed  =.=  &quot;</span>)<br>        <span class="hljs-variable language_">self</span>.request.close()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    HOST, PORT = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">9999</span><br>    server = ForkedServer((HOST, PORT), Task)<br>    server.allow_reuse_address = <span class="hljs-literal">True</span><br>    server.serve_forever()<br><br></code></pre></td></tr></table></figure><p>（前言：循环100次单纯想检验一下写代码解决，而不是直接用别人的脚本生成一个结果就好了，所以可能会有点恶心，请见谅）</p><p>就是放在密码里得md5扩展攻击</p><p>原始内容长度是随机，爆破一下就可以了。</p><p>（以下原理讲的可能不是很清楚，可以看结合第二周web中的视频讲解观看）</p><p>原理：</p><p>首先需要从md5加密过程开始说起，md5加密是分组进行加密的，每组512bits。在一开始，需要对明文进行填充，如果最后分组不满512bits的需要填充到512bits；如果原始内容刚刚好可以分组，那也需要填充一个512bits的分组。md5扩展攻击最重要的就是理解填充规则。</p><p>填充规则：</p><p>首先添加一个固定字节b''，之后需要填充由原始明文长度计算得来的8个字节，这8个字节是一定需要填充的，所以如果这个时候明文已经到达了57bytes，再填充8字节就会不再是刚好的64bytes(512bits)，所以这时候我们要新添一个分组。最后八字节为原始明文长度，填充方式为小端序。</p><p>比如len=10，先填上个b''，这时候长度为11，可以填充8字节，那么再填充b''*(64-8-1-10)，64为一个分组的字节数，8为最后需要填充的数据，1是最开始填充的b''，最后填充八个字节为b''。</p><p>比如len=33，先填上个b''，那么再填充b''*(64-8-1-33)，最后填充八个字节为b''。原始数据为264bits，验证：0x108=264</p><p>比如len=56，先填上个b''，这时候有57字节，再填充8字节的话为65字节，那么不满足分组条件，所以这时候我们需要再填充b''*(64*2-8-1-56)，也就是63个0字节，最后填充八个字节为b'。原始数据为448bits，验证：0x01c0=448</p><p>当我们填充完数据后，从第一个分组开始进行md5加密，加密过程可以不用在意，只需知道每次加密后得到32个16六进制，加密后的结果分成四组，当成下一个分组加密的IV，这是攻击的关键。</p><p>一开始，我们知道原始内容的md5值，并且原始内容长度小于64字节。这时候，服务器我们可以在原始内容后面添加自定义数据，那么最重要的就是，根据填充规则，我们只要知道原始内容长度，我们就可以自己进行填充，只要我们自己填充的数据与md5加密时一样，最后计算出的md5值也会一样，那么这个结果是作为下一组内容加密时的IV。</p><p>所以我们像服务器发送数据为：填充内容+任意内容</p><p>最后发送任意内容的md5结果，当然这里需要根据服务器一开始传来的md5值作为IV来进行加密</p><p>这里我用GPT生成了一份md5加密代码，在加密时传送进去IV值，**最重要的是，我这份源码是原始的md5加密代码，我们需要在”任意内容“前填上64bytes*分组数，而且在加密函数(my_md5)中，我们只要最后一个分组的结果，所以我们需要跳过前面几个分组（在代码中skip变量处体现）**</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-comment"># 定义MD5所需的常量</span><br>T = [<span class="hljs-built_in">int</span>(<span class="hljs-number">4294967296</span> * <span class="hljs-built_in">abs</span>(math.sin(i + <span class="hljs-number">1</span>))) &amp; <span class="hljs-number">0xFFFFFFFF</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>)]<br><br><br><span class="hljs-comment"># 定义左旋转函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">left_rotate</span>(<span class="hljs-params">x, c</span>):<br>    <span class="hljs-keyword">return</span> (x &lt;&lt; c) | (x &gt;&gt; (<span class="hljs-number">32</span> - c))<br><br><br><span class="hljs-comment"># 定义MD5主循环所需的四个基本函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">F</span>(<span class="hljs-params">x, y, z</span>):<br>    <span class="hljs-keyword">return</span> (x &amp; y) | (~x &amp; z)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">G</span>(<span class="hljs-params">x, y, z</span>):<br>    <span class="hljs-keyword">return</span> (x &amp; z) | (y &amp; ~z)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">H</span>(<span class="hljs-params">x, y, z</span>):<br>    <span class="hljs-keyword">return</span> x ^ y ^ z<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">I</span>(<span class="hljs-params">x, y, z</span>):<br>    <span class="hljs-keyword">return</span> y ^ (x | ~z)<br><br><br><span class="hljs-comment"># 定义MD5算法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_md5</span>(<span class="hljs-params">message, A, B, C, D, skip</span>):<br>    <span class="hljs-comment"># 初始化变量</span><br>    a, b, c, d = A, B, C, D<br><br>    <span class="hljs-comment"># 填充消息</span><br>    original_length = <span class="hljs-built_in">len</span>(message) * <span class="hljs-number">8</span><br>    message += <span class="hljs-string">b&#x27;\x80&#x27;</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">len</span>(message) * <span class="hljs-number">8</span>) % <span class="hljs-number">512</span> != <span class="hljs-number">448</span>:<br>        message += <span class="hljs-string">b&#x27;\x00&#x27;</span><br>    message += struct.pack(<span class="hljs-string">&#x27;&lt;Q&#x27;</span>, original_length)<br><br>    <span class="hljs-comment"># 处理每个512位（64字节）块</span><br>    <span class="hljs-comment"># 跳过前几个分组</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span> * skip, <span class="hljs-built_in">len</span>(message), <span class="hljs-number">64</span>):<br>        block = message[i:i + <span class="hljs-number">64</span>]<br>        X = struct.unpack(<span class="hljs-string">&#x27;&lt;16I&#x27;</span>, block)<br><br>        <span class="hljs-comment"># 备份当前的a, b, c, d值</span><br>        AA, BB, CC, DD = a, b, c, d<br>        <span class="hljs-comment"># 进行四轮操作，每轮16步</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>            <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt;= i &lt;= <span class="hljs-number">15</span>:<br>                k, s, func = i, [<span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">17</span>, <span class="hljs-number">22</span>][i % <span class="hljs-number">4</span>], F(b, c, d)<br>            <span class="hljs-keyword">elif</span> <span class="hljs-number">16</span> &lt;= i &lt;= <span class="hljs-number">31</span>:<br>                k, s, func = (<span class="hljs-number">5</span> * i + <span class="hljs-number">1</span>) % <span class="hljs-number">16</span>, [<span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">14</span>, <span class="hljs-number">20</span>][i % <span class="hljs-number">4</span>], G(b, c, d)<br>            <span class="hljs-keyword">elif</span> <span class="hljs-number">32</span> &lt;= i &lt;= <span class="hljs-number">47</span>:<br>                k, s, func = (<span class="hljs-number">3</span> * i + <span class="hljs-number">5</span>) % <span class="hljs-number">16</span>, [<span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">16</span>, <span class="hljs-number">23</span>][i % <span class="hljs-number">4</span>], H(b, c, d)<br>            <span class="hljs-keyword">elif</span> <span class="hljs-number">48</span> &lt;= i &lt;= <span class="hljs-number">63</span>:<br>                k, s, func = (<span class="hljs-number">7</span> * i) % <span class="hljs-number">16</span>, [<span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">21</span>][i % <span class="hljs-number">4</span>], I(b, c, d)<br><br>            temp = b + left_rotate((a + func + X[k] + T[i]) &amp; <span class="hljs-number">0xFFFFFFFF</span>, s)<br>            a, b, c, d = d, temp &amp; <span class="hljs-number">0xFFFFFFFF</span>, b, c<br><br>        <span class="hljs-comment"># 将结果加到当前的a, b, c, d</span><br>        a = (a + AA) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>        b = (b + BB) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>        c = (c + CC) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>        d = (d + DD) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>    <span class="hljs-comment"># 返回哈希结果</span><br>    <span class="hljs-keyword">return</span> struct.pack(<span class="hljs-string">&#x27;&lt;4I&#x27;</span>, a, b, c, d).<span class="hljs-built_in">hex</span>()<br><br><br>rem = remote(<span class="hljs-string">&quot;challenge.basectf.fun&quot;</span>, <span class="hljs-number">33573</span>)<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    want_md5 = rem.recv(<span class="hljs-number">32</span>).decode()  <span class="hljs-comment"># 接收原始数据的md5</span><br><br>    <span class="hljs-comment"># 计算成iv</span><br>    iv = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        tmp = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            tmp += want_md5[(i + <span class="hljs-number">1</span>) * <span class="hljs-number">8</span> - (j + <span class="hljs-number">1</span>) * <span class="hljs-number">2</span>:(i + <span class="hljs-number">1</span>) * <span class="hljs-number">8</span> - j * <span class="hljs-number">2</span>]<br>        iv.append(<span class="hljs-built_in">int</span>(tmp, <span class="hljs-number">16</span>))<br><br>    <span class="hljs-comment"># 爆破长度</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>):<br>        rem.recvuntil(<span class="hljs-string">b&quot;Please input the secret:&quot;</span>)<br><br>        <span class="hljs-comment"># 填充消息</span><br>        payload = <span class="hljs-string">b&#x27;&#x27;</span><br>        payload_length = i * <span class="hljs-number">8</span><br>        payload += <span class="hljs-string">b&#x27;\x80&#x27;</span><br>        <span class="hljs-keyword">while</span> ((i + <span class="hljs-built_in">len</span>(payload)) * <span class="hljs-number">8</span>) % <span class="hljs-number">512</span> != <span class="hljs-number">448</span>:<br>            payload += <span class="hljs-string">b&#x27;\x00&#x27;</span><br>        payload += struct.pack(<span class="hljs-string">&#x27;&lt;Q&#x27;</span>, payload_length)<br>        payload += <span class="hljs-string">b&#x27;naby&#x27;</span><br><br>        rem.sendline(payload)<br><br>        <span class="hljs-comment"># 计算填充数据后的有几个分组，需要跳过计算</span><br>        skip = (i + <span class="hljs-built_in">len</span>(payload) - <span class="hljs-number">4</span>) // <span class="hljs-number">64</span><br>        A, B, C, D = iv<br>        message = <span class="hljs-string">b&#x27;a&#x27;</span> * (<span class="hljs-number">64</span> * skip) + <span class="hljs-string">b&#x27;naby&#x27;</span><br>        res = my_md5(message, A, B, C, D, skip)<br>        rem.recvuntil(<span class="hljs-string">b&quot;Please input your md5:&quot;</span>)<br>        rem.sendline(res.encode())<br>        rem.recvline()<br>        m = rem.recvline()<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;correct&#x27;</span> <span class="hljs-keyword">in</span> m:<br>            <span class="hljs-built_in">print</span>(_, want_md5, i, m)<br>            <span class="hljs-keyword">break</span><br><br>rem.interactive()<br></code></pre></td></tr></table></figure><h2 id="fin">Fin</h2><h3 id="猜猜看">猜猜看</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> socketserver<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> ast<br><span class="hljs-keyword">import</span> os<br>flag = os.getenv(<span class="hljs-string">&#x27;GZCTF_FLAG&#x27;</span>).encode()<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span>(socketserver.BaseRequestHandler):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_recvall</span>(<span class="hljs-params">self</span>):<br>        BUFF_SIZE = <span class="hljs-number">2048</span><br>        data = <span class="hljs-string">b&#x27;&#x27;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            part = <span class="hljs-variable language_">self</span>.request.recv(BUFF_SIZE)<br>            data += part<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(part) &lt; BUFF_SIZE:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> data.strip()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">self, msg, newline=<span class="hljs-literal">True</span></span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> newline:<br>                msg += <span class="hljs-string">b&#x27;\n&#x27;</span><br>            <span class="hljs-variable language_">self</span>.request.sendall(msg)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">recv</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._recvall()<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag)==<span class="hljs-number">45</span><br>        <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&quot;hello.&quot;</span>)<br><br>        m=bytes_to_long(flag)<br>        m=<span class="hljs-built_in">bin</span>(m)[<span class="hljs-number">2</span>:]<br><br>        length=<span class="hljs-built_in">len</span>(m)<br><br>        x=np.array([<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> m])<br>        T=np.array([[random.getrandbits(<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length)] <span class="hljs-keyword">for</span> __ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length)])<br><br>        y=np.dot(x,T)<br>        <span class="hljs-variable language_">self</span>.send(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">list</span>(y)).encode())<br><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            user_input=ast.literal_eval(<span class="hljs-variable language_">self</span>.recv().strip().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(user_input,<span class="hljs-built_in">list</span>):<br>                <span class="hljs-keyword">try</span>:<br>                    mat=np.array(user_input)<br>                    res=<span class="hljs-built_in">list</span>(np.dot(mat,T))<br>                    <span class="hljs-variable language_">self</span>.send(<span class="hljs-built_in">str</span>(res).encode())<br>                <span class="hljs-keyword">except</span>:<br>                    <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;wrong!!&#x27;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;wrong!&#x27;</span>)<br>                <span class="hljs-keyword">break</span><br>        <br><br>        <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&quot;\nConnection has been closed  =.=  &quot;</span>)<br>        <span class="hljs-variable language_">self</span>.request.close()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    HOST, PORT = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">9999</span><br>    server = ForkedServer((HOST, PORT), Task)<br>    server.allow_reuse_address = <span class="hljs-literal">True</span><br>    server.serve_forever()<br></code></pre></td></tr></table></figure><p>灵感来自借nss3rd研究MT19937题目时想出来的点子。</p><p>参考：<ahref="https://www.anquanke.com/post/id/205861#h3-9">浅析MT19937伪随机数生成算法-安全客- 安全资讯平台 (anquanke.com)</a></p><p>有提到一个黑盒测试，通过矩阵乘法的性质，利用左乘一个只有一个1，其他都位0的矩阵，可以得到右矩阵的某一行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=remote()<br>p.recvline()<br>flag=<span class="hljs-built_in">eval</span>(p.recvline())<br>length=<span class="hljs-number">45</span>*<span class="hljs-number">8</span>-<span class="hljs-number">1</span><br>T=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>    x=[<span class="hljs-number">0</span>]*i+[<span class="hljs-number">1</span>]+[<span class="hljs-number">0</span>]*(length-<span class="hljs-number">1</span>-i)<br>    p.sendline(<span class="hljs-built_in">str</span>(x).encode())<br>    T.append(<span class="hljs-built_in">eval</span>(p.recvline()))<br>T=np.array(T)<br>t_ni=np.linalg.inv(T)<br><br>m=np.dot(flag,t_ni)<br>m=np.<span class="hljs-built_in">round</span>(m)<br>flag=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> m:<br>    <span class="hljs-keyword">if</span> i==<span class="hljs-number">1</span>:<br>        flag+=<span class="hljs-string">&#x27;1&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        flag+=<span class="hljs-string">&#x27;0&#x27;</span><br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(flag,<span class="hljs-number">2</span>)))<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="ecb是不安全的">ECB是不安全的</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> socketserver<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> base64<br>flag = os.getenv(<span class="hljs-string">&#x27;GZCTF_FLAG&#x27;</span>).encode()<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span>(socketserver.BaseRequestHandler):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_recvall</span>(<span class="hljs-params">self</span>):<br>        BUFF_SIZE = <span class="hljs-number">2048</span><br>        data = <span class="hljs-string">b&#x27;&#x27;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            part = <span class="hljs-variable language_">self</span>.request.recv(BUFF_SIZE)<br>            data += part<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(part) &lt; BUFF_SIZE:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> data.strip()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">self, msg, newline=<span class="hljs-literal">True</span></span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> newline:<br>                msg += <span class="hljs-string">b&#x27;\n&#x27;</span><br>            <span class="hljs-variable language_">self</span>.request.sendall(msg)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">recv</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._recvall()<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle</span>(<span class="hljs-params">self</span>):<br><br>        <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&quot;the server will connect you entered to the front of flag.&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&quot;then you will receive ciphertext(b64encode) encrypted by AES-ECB.&quot;</span>)<br><br>        key=os.urandom(<span class="hljs-number">16</span>)<br>        my_aes=AES.new(key=key,mode=AES.MODE_ECB)<br>        <span class="hljs-variable language_">self</span>.send(base64.b64encode(my_aes.encrypt(pad(flag,AES.block_size))))<br><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;:&#x27;</span>)<br>            cin=<span class="hljs-variable language_">self</span>.recv()<br>            final=cin+flag<br>            <span class="hljs-variable language_">self</span>.send(base64.b64encode(my_aes.encrypt(pad(final,AES.block_size))))<br><br>            <br>        <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&quot;\nConnection has been closed  =.=  &quot;</span>)<br>        <span class="hljs-variable language_">self</span>.request.close()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    HOST, PORT = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">9999</span><br>    server = ForkedServer((HOST, PORT), Task)<br>    server.allow_reuse_address = <span class="hljs-literal">True</span><br>    server.serve_forever()<br><br></code></pre></td></tr></table></figure><blockquote><p>灵感来源之前国外的一场，也没有给源码，甚至没有提示。</p><p>后面在cryptohack上也遇到了，就拿来出了一题。</p></blockquote><p>这题我们可以在原始内容前面加上 任意内容。</p><p>通过测试AES加密的密文，我们可以知道flag的长度。</p><blockquote><p>之后有两种方法，exp里都有写，但是从后往前爆破flag的也个点我没搞懂就先不讲了，只讲从前往后的。</p></blockquote><p>先讲利用原理：ECB模式中，算法对每一个分组进行加密，与前后分组无关，当密钥固定之后，只要这一个分组的明文相同，那么加密之后的密文也相同。</p><p>这里直接举个例子。</p><p>比如flag是BaseCTF{0123456789}，长度为19.一开始服务器给我们发送密文（base64解密之后）为32字节，为两个AES-ECB分组。我们给服务器依次发送1-16字节的数据，发送一个1字节时，服务器加密20字节，最后密文还是32字节；当发送14字节时，服务器加密33字节，最后密文为48字节，发生了变化，在这时，我们就可以计算出flag长度为32-(14-1)=19。</p><p>之后利用刚刚讲的原理，我们发送flag长度填充到一个AES-ECB分组长度减一的内容，比如这里我们发送31字节的a，这时候服务器加密：</p><p><spanclass="math inline">\(aaaaaaaaaaaaaaaa|aaaaaaaaaaaaaaB|aseCTF\{0123456789\}\)</span></p><p>之后我们爆破flag的第一个字节，少发送一个字节，这时候服务器加密：</p><p><spanclass="math inline">\(aaaaaaaaaaaaaaaa|aaaaaaaaaaaaaaa?|BaseCTF\{0123456789\}\)</span></p><p>当我们爆破到这个字节为B时，服务器加密的第二个分组跟我们第一次发送的第二个分组相同，产生的密文也就相同，那么就可以推断出爆破成功，之后发送数据就要连带上爆破出来的flag。</p><p>这里在举爆破一个分组长度后的例子：</p><p>此时我们需要爆破flag的第17字节，我们已知flag的前16字节，我们发送(31-16)=15字节的a，得到：</p><p><spanclass="math inline">\(aaaaaaaaaaaaaaaB|aseCTF\{012345678|9\}\)</span></p><p>之后爆破第17位，此时发送数据需要带上flag，这是我们发送的数据aaaaaaaaaaaaaaaB|aseCTF{01234567?，最后得到：</p><p><spanclass="math inline">\(aaaaaaaaaaaaaaaaB|aseCTF\{01234567?|BaseCTF\{0123456789\}\)</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> base64<br>p=remote()<br><br><span class="hljs-built_in">print</span>(p.recvline())<br><span class="hljs-built_in">print</span>(p.recvline())<br><br>c=p.recvline()[:-<span class="hljs-number">1</span>]<br>c=base64.b64decode(c)<br><br>length1=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>    p.recvline()    <span class="hljs-comment"># b&quot;:\n&quot;</span><br>    payload=<span class="hljs-string">b&#x27;a&#x27;</span>*i<br>    p.sendline(payload)<br>    d=p.recvline()[:-<span class="hljs-number">1</span>]<br>    d=base64.b64decode(d)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(d)!=<span class="hljs-built_in">len</span>(c):<br>        length1=i<br>        <span class="hljs-keyword">break</span><br>length_flag=<span class="hljs-built_in">len</span>(c)-length1<br><span class="hljs-built_in">print</span>(length_flag)<br><br><span class="hljs-comment"># 从前往后爆破flag</span><br>payload_length=<span class="hljs-built_in">len</span>(c)+<span class="hljs-number">16</span>     <span class="hljs-comment"># 多一个分组保容错</span><br>flag=<span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(payload_length-<span class="hljs-number">1</span>,payload_length-<span class="hljs-number">1</span>-length_flag,-<span class="hljs-number">1</span>):<br>    p.recvline()    <span class="hljs-comment"># b&quot;:\n&quot;</span><br>    payload=<span class="hljs-string">b&#x27;a&#x27;</span>*i<br>    p.sendline(payload)<br>    d=p.recvline()[:-<span class="hljs-number">1</span>]<br>    d=base64.b64decode(d)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">33</span>,<span class="hljs-number">128</span>):<br>        p.recvline()    <span class="hljs-comment"># b&quot;:\n&quot;</span><br>        payload1=<span class="hljs-string">b&#x27;a&#x27;</span>*i+flag+<span class="hljs-built_in">chr</span>(j).encode()<br>        p.sendline(payload1)<br>        e=p.recvline()[:-<span class="hljs-number">1</span>]<br>        e=base64.b64decode(e)<br>        e=e[payload_length-<span class="hljs-number">16</span>:payload_length]<br>        <span class="hljs-keyword">if</span> e <span class="hljs-keyword">in</span> d:<br>            flag+=<span class="hljs-built_in">chr</span>(j).encode()<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(flag)<br><br><span class="hljs-string">&quot;&quot;&quot;# 从后往前爆破flag(此方法需要知道填充模式)</span><br><span class="hljs-string">from Crypto.Util.Padding import pad</span><br><span class="hljs-string">from Crypto.Cipher import AES</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 在前面填充到满足AES加密的分组长度</span><br><span class="hljs-string">dic=&#x27;&#123;&#125;-BCTF0123456789abcdef&#x27;</span><br><span class="hljs-string">flag=b&#x27;&#x27;</span><br><span class="hljs-string">for i in range(length_flag):</span><br><span class="hljs-string">    p.recvline()    # b&quot;:\n&quot;</span><br><span class="hljs-string">    server_payload=b&#x27;a&#x27;*(length1+i+1)</span><br><span class="hljs-string">    p.sendline(server_payload)</span><br><span class="hljs-string">    server_flag=p.recvline()[:-1]</span><br><span class="hljs-string">    server_flag=base64.b64decode(server_flag)</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    for j in dic:</span><br><span class="hljs-string">        p.recvline()    # b&quot;:\n&quot;</span><br><span class="hljs-string">        my_payload=j.encode()+flag</span><br><span class="hljs-string">        my_payload=pad(my_payload,AES.block_size)</span><br><span class="hljs-string">        my_payload=my_payload+b&#x27;a&#x27;  # 我也不知道这里为什么要多加一个字节,当i=2时不加这个字节就会出错</span><br><span class="hljs-string">        p.sendline(my_payload)</span><br><span class="hljs-string">        my_flag=p.recvline()[:-1]</span><br><span class="hljs-string">        my_flag=base64.b64decode(my_flag)</span><br><span class="hljs-string">        my_flag=my_flag[:16]</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        if my_flag in server_flag:</span><br><span class="hljs-string">            flag=j.encode()+flag</span><br><span class="hljs-string">            </span><br><span class="hljs-string">            break</span><br><span class="hljs-string">    print(flag)&quot;&quot;&quot;</span><br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="の歪来">の歪来</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><br>flag=<span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag)==<span class="hljs-number">28</span><br>m=bytes_to_long(flag)<br><br>n=getPrime(<span class="hljs-number">2048</span>)<br>e=<span class="hljs-number">32</span><br><br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n =&quot;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e =&quot;</span>,e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c =&quot;</span>,c)<br><br></code></pre></td></tr></table></figure><p>AMM开根</p><p>论文在这里：<a href="https://arxiv.org/pdf/1111.4877">1111.4877(arxiv.org)</a></p><blockquote><p>我还没搞懂，所以直接套用了板子。</p><p>我出这题只是想着AMM的常规板子是两个素数求解然后求CRT，我就改成了一个素数，然后小m可以直接得到。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> math<br><br><br>p = <span class="hljs-number">17363249226879909675667629533972233798566313669420563155296918020175446973456428454735263489044575257132690882883587342817653451483222705760704890265900885255972067349104579938808591608382992680533327518070878297438339884996059309549300942570104747348751766711833983705979880714174709047335147739991850385244159235504375559144283494800573079055547597410783559965162216203307100248001158445665271438067670522510991047688414176659907164436539491205637933681658814267567385232097679554282863595183422504494357205180093828786415060565003183966959273253039416986816444073158723191290806413175478175738266995214965220231649</span><br>e = <span class="hljs-number">32</span><br>c = <span class="hljs-number">6840453756562205147103219479843999687625029691496635689045074720240615321966887831642035124198445485320265097191334720798522097422084141332044111764558336174743819347952914775206809737198058220362381349481027893609144697054465070779290329222696236671374412706789862193871687821041053566873553189148668599841084370137084893575567622972476409755187388121177923217208552049876944055745912987536390075417261016809335539362984984190264791744790640858201038207982043569204062714722892105134794280417020318408200038144689432974312283915592134911446185412636709207566063730723406969727969141426530341540330398465744403597273</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">onemod</span>(<span class="hljs-params">e, q</span>):<br>    p = random.randint(<span class="hljs-number">1</span>, q-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">while</span>(powmod(p, (q-<span class="hljs-number">1</span>)//e, q) == <span class="hljs-number">1</span>):  <span class="hljs-comment"># (r,s)=1</span><br>        p = random.randint(<span class="hljs-number">1</span>, q)<br>    <span class="hljs-keyword">return</span> p<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">AMM_rth</span>(<span class="hljs-params">o, r, q</span>):  <span class="hljs-comment"># r|(q-1</span><br>    <span class="hljs-keyword">assert</span>((q-<span class="hljs-number">1</span>) % r == <span class="hljs-number">0</span>)<br>    p = onemod(r, q)<br><br>    t = <span class="hljs-number">0</span><br>    s = q-<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span>(s % r == <span class="hljs-number">0</span>):<br>        s = s//r<br>        t += <span class="hljs-number">1</span><br>    k = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span>((s*k+<span class="hljs-number">1</span>) % r != <span class="hljs-number">0</span>):<br>        k += <span class="hljs-number">1</span><br>    alp = (s*k+<span class="hljs-number">1</span>)//r<br><br>    a = powmod(p, r**(t-<span class="hljs-number">1</span>)*s, q)<br>    b = powmod(o, r*a-<span class="hljs-number">1</span>, q)<br>    c = powmod(p, s, q)<br>    h = <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, t-<span class="hljs-number">1</span>):<br>        d = powmod(<span class="hljs-built_in">int</span>(b), r**(t-<span class="hljs-number">1</span>-i), q)<br>        <span class="hljs-keyword">if</span> d == <span class="hljs-number">1</span>:<br>            j = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">else</span>:<br>            j = (-math.log(d, a)) % r<br>        b = (b*(c**(r*j))) % q<br>        h = (h*c**j) % q<br>        c = (c*r) % q<br>    result = (powmod(o, alp, q)*h)<br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ALL_Solution</span>(<span class="hljs-params">m, q, rt, cq, e</span>):<br>    mp = []<br>    <span class="hljs-keyword">for</span> pr <span class="hljs-keyword">in</span> rt:<br>        r = (pr*m) % q<br>        <span class="hljs-comment"># assert(pow(r, e, q) == cq)</span><br>        mp.append(r)<br>    <span class="hljs-keyword">return</span> mp<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc</span>(<span class="hljs-params">mp, mq, e, p, q</span>):<br>    i = <span class="hljs-number">1</span><br>    j = <span class="hljs-number">1</span><br>    t1 = invert(q, p)<br>    t2 = invert(p, q)<br>    <span class="hljs-keyword">for</span> mp1 <span class="hljs-keyword">in</span> mp:<br>        <span class="hljs-keyword">for</span> mq1 <span class="hljs-keyword">in</span> mq:<br>            j += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> j % <span class="hljs-number">100000</span> == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(j)<br>            ans = (mp1*t1*q+mq1*t2*p) % (p*q)<br>            <span class="hljs-keyword">if</span> check(ans):<br>                <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">return</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">m</span>):<br>    <span class="hljs-keyword">try</span>:<br>        a = long_to_bytes(m)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;NSSCTF&#x27;</span> <span class="hljs-keyword">in</span> a:<br>            <span class="hljs-built_in">print</span>(a)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ALL_ROOT2</span>(<span class="hljs-params">r, q</span>):  <span class="hljs-comment"># use function set() and .add() ensure that the generated elements are not repeated</span><br>    li = <span class="hljs-built_in">set</span>()<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">len</span>(li) &lt; r):<br>        p = powmod(random.randint(<span class="hljs-number">1</span>, q-<span class="hljs-number">1</span>), (q-<span class="hljs-number">1</span>)//r, q)<br>        li.add(p)<br>    <span class="hljs-keyword">return</span> li<br><br>cp = c % p<br><br>mp = AMM_rth(cp, e, p)<br><br>rt1 = ALL_ROOT2(e, p) <br>amp = ALL_Solution(mp, p, rt1, cp, e)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> amp:<br>    m=long_to_bytes(i)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;BaseCTF&#x27;</span> <span class="hljs-keyword">in</span> m:<br>        <span class="hljs-built_in">print</span>(m)<br>        <span class="hljs-keyword">break</span><br><br></code></pre></td></tr></table></figure><h3 id="老涩批了">老涩批了</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> socketserver<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> uuid <br>flag = os.getenv(<span class="hljs-string">&#x27;GZCTF_FLAG&#x27;</span>).encode()<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span>(socketserver.BaseRequestHandler):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_recvall</span>(<span class="hljs-params">self</span>):<br>        BUFF_SIZE = <span class="hljs-number">2048</span><br>        data = <span class="hljs-string">b&#x27;&#x27;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            part = <span class="hljs-variable language_">self</span>.request.recv(BUFF_SIZE)<br>            data += part<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(part) &lt; BUFF_SIZE:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> data.strip()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">self, msg, newline=<span class="hljs-literal">True</span></span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> newline:<br>                msg += <span class="hljs-string">b&#x27;\n&#x27;</span><br>            <span class="hljs-variable language_">self</span>.request.sendall(msg)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">recv</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._recvall()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle</span>(<span class="hljs-params">self</span>):<br>        <br>        p=getPrime(<span class="hljs-number">256</span>)<br>        q=getPrime(<span class="hljs-number">256</span>)<br>        n=p*q<br>        e=<span class="hljs-number">65537</span><br>        d=inverse(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br><br>        text=<span class="hljs-string">b&#x27;BaseCTF&#123;&#x27;</span>+<span class="hljs-built_in">str</span>(uuid.uuid4()).encode()+<span class="hljs-string">b&#x27;&#125;&#x27;</span><br><br>        m1=bytes_to_long(text[:<span class="hljs-built_in">len</span>(text)//<span class="hljs-number">2</span>])<br>        c1=<span class="hljs-built_in">pow</span>(m1,e,n)<br><br>        m2=bytes_to_long(text[<span class="hljs-built_in">len</span>(text)//<span class="hljs-number">2</span>:])<br>        c2=<span class="hljs-built_in">pow</span>(m2,e,n)<br><br>        <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;n = &#x27;</span>+<span class="hljs-built_in">str</span>(n).encode())<br>        <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;e = &#x27;</span>+<span class="hljs-built_in">str</span>(e).encode())<br>        <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;c1 = &#x27;</span>+<span class="hljs-built_in">str</span>(c1).encode())<br>        <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;c2 = &#x27;</span>+<span class="hljs-built_in">str</span>(c2).encode())<br><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            select=<span class="hljs-variable language_">self</span>.recv().strip()<br>            <span class="hljs-keyword">if</span> select==<span class="hljs-string">b&#x27;1&#x27;</span>:<br>                c=<span class="hljs-built_in">int</span>(<span class="hljs-variable language_">self</span>.recv().decode().strip())<br>                m=<span class="hljs-built_in">pow</span>(c,d,n)<br>                res=m&amp;<span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> select==<span class="hljs-string">b&#x27;2&#x27;</span>:<br>                c=<span class="hljs-built_in">int</span>(<span class="hljs-variable language_">self</span>.recv().decode().strip())<br>                m=<span class="hljs-built_in">pow</span>(c,d,n)<br>                res=long_to_bytes(m,<span class="hljs-number">64</span>)[<span class="hljs-number">0</span>]<br>            <span class="hljs-keyword">elif</span> select==<span class="hljs-string">b&#x27;3&#x27;</span>:<br>                user_text=<span class="hljs-variable language_">self</span>.recv().strip()<br>                <span class="hljs-keyword">if</span> user_text==text:<br>                    <span class="hljs-variable language_">self</span>.send(flag)<br>                    <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;try again&#x27;</span>)<br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span> :<br>                <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;wrong&#x27;</span>)<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-variable language_">self</span>.send(<span class="hljs-built_in">str</span>(res).encode())<br>        <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&quot;\nConnection has been closed  =.=  &quot;</span>)<br>        <span class="hljs-variable language_">self</span>.request.close()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    HOST, PORT = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">9999</span><br>    server = ForkedServer((HOST, PORT), Task)<br>    server.allow_reuse_address = <span class="hljs-literal">True</span><br>    server.serve_forever()<br><br></code></pre></td></tr></table></figure><p>参考了La佬的博客：<ahref="https://lazzzaro.github.io/2020/05/06/crypto-RSA/">RSA | Lazzaro(lazzzaro.github.io)</a></p><p>说明一下出题：没点子了，就逛ctfwiki上看到了这个，然后搜了一圈只找到了LSB的代码，MSB没有，我就顺便结合起来了，然后由于GZ这里每个队伍开不同容器flag还是一样的，为了防止多次加密不安全，所以套了一下，先道个歉。</p><p>原理我就不献丑了，可以去看看佬们的博客。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> decimal<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> *<br>rem=remote()<br>rem.recvuntil(<span class="hljs-string">b&#x27;n = &#x27;</span>)<br>n=<span class="hljs-built_in">int</span>(rem.recvline().decode().strip())<br><br>rem.recvuntil(<span class="hljs-string">b&#x27;e = &#x27;</span>)<br>e=<span class="hljs-built_in">int</span>(rem.recvline().decode().strip())<br><br>rem.recvuntil(<span class="hljs-string">b&#x27;c1 = &#x27;</span>)<br>c1=<span class="hljs-built_in">int</span>(rem.recvline().decode().strip())<br><br>rem.recvuntil(<span class="hljs-string">b&#x27;c2 = &#x27;</span>)<br>c2=<span class="hljs-built_in">int</span>(rem.recvline().decode().strip())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">server_decode1</span>(<span class="hljs-params">c</span>):<br>    rem.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    sleep(<span class="hljs-number">0.01</span>)<br>    rem.sendline(<span class="hljs-built_in">str</span>(c).encode())<br>    rec=rem.recvline().strip()<br>    <span class="hljs-keyword">return</span> rec<br>kbits = n.bit_length()<br>decimal.getcontext().prec = kbits<br>L = decimal.Decimal(<span class="hljs-number">0</span>)<br>R = decimal.Decimal(<span class="hljs-built_in">int</span>(n))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(kbits):<br>    c1 = (c1 * <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, e, n)) % n<br>    recv = server_decode1(c1)<br>    <span class="hljs-keyword">if</span> recv == <span class="hljs-string">b&#x27;1&#x27;</span>:<br>        L = (L + R) // <span class="hljs-number">2</span><br>    <span class="hljs-keyword">else</span>:<br>        R = (L + R) // <span class="hljs-number">2</span><br>flag1=long_to_bytes(<span class="hljs-built_in">int</span>((R)))<br><span class="hljs-built_in">print</span>(flag1)<br>sleep(<span class="hljs-number">0.01</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">server_decode2</span>(<span class="hljs-params">c</span>):<br>    rem.sendline(<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    sleep(<span class="hljs-number">0.01</span>)<br>    rem.sendline(<span class="hljs-built_in">str</span>(c).encode())<br>    rec=rem.recvline().strip()<br>    <span class="hljs-keyword">return</span> rec<br>k=<span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    c22 = (c2 * <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, e*k, n)) % n<br>    res=server_decode2(c22)<br>    res=<span class="hljs-built_in">int</span>(res)<br>    <span class="hljs-keyword">if</span> res&amp;<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">break</span><br>    k=k+<span class="hljs-number">1</span><br>L=<span class="hljs-number">2</span>**(k-<span class="hljs-number">1</span>)<br>R=<span class="hljs-number">2</span>**k<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">if</span> R-L==<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">break</span><br>    x=(L+R)//<span class="hljs-number">2</span><br>    c22 = (c2 * <span class="hljs-built_in">pow</span>(x, e, n)) % n<br>    res=server_decode2(c22)<br>    res=<span class="hljs-built_in">int</span>(res)<br>    <span class="hljs-keyword">if</span> res:<br>        R=x<br>    <span class="hljs-keyword">else</span> :<br>        L=x<br>flag2=(<span class="hljs-number">2</span>**(kbits-<span class="hljs-number">8</span>)//L)<br><span class="hljs-built_in">print</span>(long_to_bytes(flag2))<br>user_text=flag1[:-<span class="hljs-number">1</span>]+<span class="hljs-string">b&#x27;-&#x27;</span>+long_to_bytes(flag2)<br><span class="hljs-built_in">print</span>(user_text)<br>rem.sendline(<span class="hljs-string">b&#x27;3&#x27;</span>)<br>sleep(<span class="hljs-number">0.01</span>)<br>rem.sendline(user_text)<br><br><br>rem.interactive()<br><br></code></pre></td></tr></table></figure><h3 id="pdp">PDP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> hmac<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">KeyGen</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        pp=getPrime(<span class="hljs-number">512</span>)<br>        p=<span class="hljs-number">2</span>*pp+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> isPrime(p):<br>            pp=getPrime(<span class="hljs-number">512</span>)<br>            p=<span class="hljs-number">2</span>*pp+<span class="hljs-number">1</span><br><br>        qq=getPrime(<span class="hljs-number">512</span>)<br>        q=<span class="hljs-number">2</span>*qq+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> isPrime(q):<br>            qq=getPrime(<span class="hljs-number">512</span>)<br>            q=<span class="hljs-number">2</span>*qq+<span class="hljs-number">1</span><br>        <br>        <span class="hljs-keyword">if</span> pp!=qq:<br>            <span class="hljs-keyword">break</span><br>    n=p*q<br>    phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br><br>    e=getPrime(<span class="hljs-number">1024</span>)<br>    d=invert(e,phi)<br><br>    v=getRandomNBitInteger(<span class="hljs-number">128</span>)<br><br>    g=e**<span class="hljs-number">2</span>%n<br><br>    <span class="hljs-keyword">return</span> (n,g,e,d,v)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">TagBlock</span>(<span class="hljs-params">n,g,d,v</span>):<br>    f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;ABigFile&quot;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>    F=f.read()<br>    f.close()<br>    b_size=<span class="hljs-number">64</span>   <span class="hljs-comment"># 64B</span><br><br>    block_count=<span class="hljs-built_in">len</span>(F)//b_size + (<span class="hljs-number">0</span> <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(F)%b_size==<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">1</span>)<br><br>    W=[]<br>    tags=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(block_count):<br>        Wi=<span class="hljs-built_in">str</span>(v)+<span class="hljs-built_in">str</span>(i)<br>        W.append(Wi)<br><br>        block=bytes_to_long(F[i*b_size:(i+<span class="hljs-number">1</span>)*b_size])<br><br>        my_md5=hashlib.md5()<br>        my_md5.update(Wi.encode())<br>        tags.append(<span class="hljs-built_in">pow</span>((<span class="hljs-built_in">int</span>(my_md5.hexdigest(),<span class="hljs-number">16</span>)*<span class="hljs-built_in">pow</span>(g,block,n))%n,d,n))<br>    <span class="hljs-keyword">return</span> (W,tags)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">GenProof</span>(<span class="hljs-params">n,g</span>):<br>    c=randint(<span class="hljs-number">400</span>,<span class="hljs-number">500</span>)<br>    k1=getRandomNBitInteger(<span class="hljs-number">256</span>)<br>    k2=getRandomNBitInteger(<span class="hljs-number">160</span>)<br>    s=getRandomNBitInteger(<span class="hljs-number">16</span>)<br>    <span class="hljs-keyword">return</span> (c,k1,k2,s,<span class="hljs-built_in">pow</span>(g,s,n))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_proof</span>(<span class="hljs-params">n,tags,c,k1,k2,gs,judge=<span class="hljs-number">0</span></span>):<br>    f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;ABigFile&quot;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>    F=f.read()<br>    f.close()<br>    b_size=<span class="hljs-number">64</span>   <span class="hljs-comment"># 64B</span><br><br>    <span class="hljs-keyword">if</span> judge:<br>        listF=<span class="hljs-built_in">list</span>(F)<br>        X=[]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(F)//<span class="hljs-number">100</span>):<br>            x=randint(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(F)-<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">while</span> listF[x]==<span class="hljs-number">0</span>:<br>                x=randint(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(F)-<span class="hljs-number">1</span>)<br>            X.append(x)<br>            listF[x]=<span class="hljs-number">0</span><br>        F=<span class="hljs-string">b&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> listF:<br>            F+=long_to_bytes(i)<br><br>    block_count=<span class="hljs-built_in">len</span>(F)//b_size + (<span class="hljs-number">0</span> <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(F)%b_size==<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">1</span>)<br>    T=<span class="hljs-number">1</span><br>    temp=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(c):<br>        my_aes=AES.new(long_to_bytes(k1),mode=AES.MODE_ECB)<br>        i=my_aes.encrypt(pad(long_to_bytes(j),AES.block_size))<br>        i=bytes_to_long(i)%block_count<br><br>        my_sha256=hashlib.sha256<br>        my_hmac=hmac.new(long_to_bytes(k2),digestmod=my_sha256)<br>        my_hmac.update(long_to_bytes(j))<br>        a=<span class="hljs-built_in">int</span>(my_hmac.hexdigest(),<span class="hljs-number">16</span>)%n<br><br>        T=(T*(<span class="hljs-built_in">pow</span>(tags[i],a,n)))%n<br><br>        block=bytes_to_long(F[i*b_size:(i+<span class="hljs-number">1</span>)*b_size])%n<br><br>        temp=temp+block*a<br>    temp=<span class="hljs-built_in">pow</span>(gs,temp,n)<br>    my_sha1=hashlib.sha1()<br>    my_sha1.update(<span class="hljs-built_in">str</span>(temp).encode())<br>    rho=<span class="hljs-built_in">int</span>(my_sha1.hexdigest(),<span class="hljs-number">16</span>)<br>    <span class="hljs-keyword">return</span> (T,rho)<br><br>n,g,e,d,v=KeyGen()<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./output/key.txt&quot;</span>,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    file.write(<span class="hljs-built_in">str</span>(n)+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    file.write(<span class="hljs-built_in">str</span>(e)+<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>W,tags=TagBlock(n,g,d,v)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./output/W.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> W:<br>        file.write(<span class="hljs-built_in">str</span>(i))<br>        file.write(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>c,k1,k2,s,gs=GenProof(n,g)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./output/chal.txt&quot;</span>,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    file.write(<span class="hljs-built_in">str</span>(c)+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    file.write(<span class="hljs-built_in">str</span>(k1)+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    file.write(<span class="hljs-built_in">str</span>(k2)+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    file.write(<span class="hljs-built_in">str</span>(s)+<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>T,rho=gen_proof(n,tags,c,k1,k2,gs)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./output/result.txt&quot;</span>,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        file.write(<span class="hljs-built_in">str</span>(T)+<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>flag_md5=hashlib.md5()<br>flag_md5.update(<span class="hljs-built_in">str</span>(rho).encode())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">b&#x27;BaseCTF&#123;&#x27;</span>+flag_md5.hexdigest().encode()+<span class="hljs-string">b&#x27;&#125;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>我的毕设课题，正好感觉能出成一题就出了，具体不多说，详了解的可以看：<ahref="https://github.com/naby1/S-PDP">naby1/S-PDP (github.com)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> hmac<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">CheckProff</span>(<span class="hljs-params">n,e,W,c,k1,k2,s,T</span>):<br>    tau=<span class="hljs-built_in">pow</span>(T,e,n)<br>    block_count=<span class="hljs-built_in">len</span>(W)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(c):<br>        my_aes=AES.new(long_to_bytes(k1),mode=AES.MODE_ECB)<br>        i=my_aes.encrypt(pad(long_to_bytes(j),AES.block_size))<br>        i=bytes_to_long(i)%block_count<br><br>        my_sha256=hashlib.sha256<br>        my_hmac=hmac.new(long_to_bytes(k2),digestmod=my_sha256)<br>        my_hmac.update(long_to_bytes(j))<br>        a=<span class="hljs-built_in">int</span>(my_hmac.hexdigest(),<span class="hljs-number">16</span>)%n<br><br>        Wi=<span class="hljs-built_in">str</span>(W[i])<br>        my_md5=hashlib.md5()<br>        my_md5.update(Wi.encode())<br>        hw=<span class="hljs-built_in">pow</span>(<span class="hljs-built_in">int</span>(my_md5.hexdigest(),<span class="hljs-number">16</span>),a,n)<br>        tau=(tau*invert(hw,n))%n<br>    tau=<span class="hljs-built_in">pow</span>(tau,s,n)<br>    my_sha1=hashlib.sha1()<br>    my_sha1.update(<span class="hljs-built_in">str</span>(tau).encode())<br>    tau=<span class="hljs-built_in">int</span>(my_sha1.hexdigest(),<span class="hljs-number">16</span>)<br>    flag_md5=hashlib.md5()<br>    flag_md5.update(<span class="hljs-built_in">str</span>(tau).encode())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">b&#x27;BaseCTF&#123;&#x27;</span>+flag_md5.hexdigest().encode()+<span class="hljs-string">b&#x27;&#125;&#x27;</span>)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./output/key.txt&quot;</span>,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    n=<span class="hljs-built_in">int</span>(file.readline())<br>    e=<span class="hljs-built_in">int</span>(file.readline())<br><br>W=[]<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./output/W.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    fl=file.readline()<br>    <span class="hljs-keyword">while</span> fl:<br>        W.append(<span class="hljs-built_in">int</span>(fl))<br>        fl=file.readline()<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./output/chal.txt&quot;</span>,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    c=<span class="hljs-built_in">int</span>(file.readline())<br>    k1=<span class="hljs-built_in">int</span>(file.readline())<br>    k2=<span class="hljs-built_in">int</span>(file.readline())<br>    s=<span class="hljs-built_in">int</span>(file.readline())<br>T=<span class="hljs-number">234286400251524464112670458144913694525518333434039777508421611102466502545441606446799021254782625175811569624228349681696143431027926557585053651139957429856785510525021542033961575674601192776283321921860155347475439442726331189839563865687519551977156169783131926796425661730777079164446161030078497564104</span><br>CheckProff(n,e,W,c,k1,k2,s,T)<br><br><span class="hljs-comment">#BaseCTF&#123;d198bce7a2f06ed24d3b043bddbd7512&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
